/**
 * 加盟店ステータス定義と遷移ルール
 */

// ステータス定数
const FRANCHISE_STATUS = {
  // 申請フェーズ
  NEW_REGISTRATION: '新規登録',

  // 準備フェーズ
  PREPARING: '準備中',

  // 稼働フェーズ
  ACTIVE: 'アクティブ',
  PAUSED: '一時停止',
  SILENT: 'サイレント',  // 内部的に配信停止（相手には通知しない）
  INACTIVE: '非アクティブ',

  // 終了フェーズ
  SUSPENDED: '休止',
  WITHDRAWN: '退会',
  REJECTED: '却下'
};

// ステータスグループ（UI表示用）
const STATUS_GROUPS = {
  PENDING: ['新規登録'],
  APPROVED: ['準備中', 'アクティブ', '一時停止'],
  SILENT_GROUP: ['サイレント'],  // 管理者のみ表示
  INACTIVE_GROUP: ['非アクティブ', '休止'],
  TERMINATED: ['退会', '却下']
};

// ステータス遷移ルール
const STATUS_TRANSITIONS = {
  '新規登録': {
    allowedNext: ['準備中', '却下'],
    requiresApproval: true,
    description: '申請中の状態'
  },

  '準備中': {
    allowedNext: ['アクティブ', '休止'],
    requiresSetup: true,
    description: '承認済み、初期設定待ち'
  },

  'アクティブ': {
    allowedNext: ['一時停止', 'サイレント', '非アクティブ', '休止', '退会'],
    autoTransition: {
      to: '非アクティブ',
      condition: 'no_delivery_30days'
    },
    description: '通常稼働中'
  },

  '一時停止': {
    allowedNext: ['アクティブ', 'サイレント', '非アクティブ', '休止'],
    autoTransition: {
      to: '非アクティブ',
      condition: 'no_delivery_30days'
    },
    description: '一時的に配信停止'
  },

  'サイレント': {
    allowedNext: ['アクティブ', '一時停止', '非アクティブ', '休止', '退会'],
    isInternal: true,  // 内部ステータス（加盟店には非表示）
    description: '内部的に配信停止（加盟店には通知しない）'
  },

  '非アクティブ': {
    allowedNext: ['アクティブ', '休止'],
    autoGenerated: true,
    description: '30日間配信なしで自動変更'
  },

  '休止': {
    allowedNext: ['アクティブ', '退会'],
    description: '再開時期未定の休止状態'
  },

  '退会': {
    allowedNext: [],
    isFinal: true,
    description: '退会済み（終了）'
  },

  '却下': {
    allowedNext: [],
    isFinal: true,
    description: '申請却下（終了）'
  }
};

/**
 * ステータス遷移が可能かチェック
 * @param {string} currentStatus - 現在のステータス
 * @param {string} newStatus - 変更先のステータス
 * @return {boolean} 遷移可能かどうか
 */
function canTransitionTo(currentStatus, newStatus) {
  const transition = STATUS_TRANSITIONS[currentStatus];
  if (!transition) {
    console.error(`Unknown status: ${currentStatus}`);
    return false;
  }

  return transition.allowedNext.includes(newStatus);
}

/**
 * ステータス変更を実行
 * @param {string} franchiseId - 加盟店ID
 * @param {string} newStatus - 新しいステータス
 * @param {string} changedBy - 変更者
 * @param {string} reason - 変更理由（オプション）
 * @return {Object} 変更結果
 */
function updateFranchiseStatus(franchiseId, newStatus, changedBy, reason = '') {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const spreadsheetId = scriptProps.getProperty('SPREADSHEET_ID');
    const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName('加盟店登録');

    // 該当行を検索
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();

    for (let i = 1; i < values.length; i++) {
      if (values[i][1] === franchiseId) { // B列が登録ID
        const row = i + 1;
        const currentStatus = values[i][35]; // AJ列（index 35）

        // 遷移可能かチェック
        if (!canTransitionTo(currentStatus, newStatus)) {
          return {
            success: false,
            message: `ステータス遷移不可: ${currentStatus} → ${newStatus}`
          };
        }

        // ステータス更新
        sheet.getRange(row, 36).setValue(newStatus); // AJ列（36列目）：ステータス
        // AK列（37列目）は承認ステータスなので変更しない
        sheet.getRange(row, 38).setValue(new Date()); // AL列（38列目）：更新日時
        sheet.getRange(row, 39).setValue(changedBy); // AM列（39列目）：更新者

        // 理由があれば記録
        if (reason) {
          sheet.getRange(row, 40).setValue(reason); // AN列（40列目）：変更理由
        }

        // ステータス履歴を記録（新しいシートが必要な場合）
        logStatusChange(franchiseId, currentStatus, newStatus, changedBy, reason);

        SpreadsheetApp.flush();

        return {
          success: true,
          message: `ステータス更新完了: ${currentStatus} → ${newStatus}`,
          previousStatus: currentStatus,
          newStatus: newStatus
        };
      }
    }

    return {
      success: false,
      message: `加盟店ID ${franchiseId} が見つかりません`
    };

  } catch (error) {
    console.error('ステータス更新エラー:', error);
    return {
      success: false,
      message: error.toString()
    };
  }
}

/**
 * ステータス変更履歴を記録
 * @param {string} franchiseId - 加盟店ID
 * @param {string} fromStatus - 変更前ステータス
 * @param {string} toStatus - 変更後ステータス
 * @param {string} changedBy - 変更者
 * @param {string} reason - 変更理由
 */
function logStatusChange(franchiseId, fromStatus, toStatus, changedBy, reason = '') {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const spreadsheetId = scriptProps.getProperty('SPREADSHEET_ID');
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);

    // ステータス履歴シートがなければ作成
    let historySheet = spreadsheet.getSheetByName('ステータス履歴');
    if (!historySheet) {
      historySheet = spreadsheet.insertSheet('ステータス履歴');
      // ヘッダー行を追加
      historySheet.getRange(1, 1, 1, 6).setValues([[
        'タイムスタンプ', '加盟店ID', '変更前', '変更後', '変更者', '理由'
      ]]);
    }

    // 新しい履歴を追加
    const newRow = historySheet.getLastRow() + 1;
    historySheet.getRange(newRow, 1, 1, 6).setValues([[
      new Date(),
      franchiseId,
      fromStatus,
      toStatus,
      changedBy,
      reason
    ]]);

  } catch (error) {
    console.error('ステータス履歴記録エラー:', error);
    // 履歴記録の失敗はメイン処理に影響させない
  }
}

/**
 * 自動ステータス更新（定期実行用）
 * 30日間配信がない加盟店を非アクティブにする
 */
function autoUpdateInactiveStatus() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const spreadsheetId = scriptProps.getProperty('SPREADSHEET_ID');
    const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName('加盟店登録');

    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    let updatedCount = 0;

    for (let i = 1; i < values.length; i++) {
      const status = values[i][35]; // AJ列（index 35）
      const lastDeliveryDate = values[i][41]; // AO列（仮：最終配信日）

      // アクティブまたは一時停止で、30日以上配信がない場合
      if ((status === 'アクティブ' || status === '一時停止') && lastDeliveryDate) {
        const lastDate = new Date(lastDeliveryDate);
        if (lastDate < thirtyDaysAgo) {
          const franchiseId = values[i][1]; // B列
          const result = updateFranchiseStatus(
            franchiseId,
            '非アクティブ',
            'システム自動',
            '30日間配信なし'
          );

          if (result.success) {
            updatedCount++;
            console.log(`自動非アクティブ化: ${franchiseId}`);
          }
        }
      }
    }

    console.log(`自動ステータス更新完了: ${updatedCount}件`);
    return updatedCount;

  } catch (error) {
    console.error('自動ステータス更新エラー:', error);
    return 0;
  }
}

/**
 * ステータスに応じた表示色を取得（UI用）
 * @param {string} status - ステータス
 * @return {string} カラーコード
 */
function getStatusColor(status) {
  const colors = {
    '新規登録': '#FFA500',     // オレンジ
    '準備中': '#4169E1',       // ブルー
    'アクティブ': '#00C851',   // グリーン
    '一時停止': '#FFBB33',     // イエロー
    'サイレント': '#9C27B0',   // パープル（管理者のみ表示）
    '非アクティブ': '#9E9E9E', // グレー
    '休止': '#795548',         // ブラウン
    '退会': '#424242',         // ダークグレー
    '却下': '#FF3547'          // レッド
  };

  return colors[status] || '#757575';
}

/**
 * 加盟店に表示可能なステータスか判定
 * @param {string} status - ステータス
 * @return {boolean} 加盟店に表示可能か
 */
function isVisibleToFranchise(status) {
  // サイレントは加盟店には見せない（アクティブとして表示）
  const internalStatuses = ['サイレント'];
  return !internalStatuses.includes(status);
}

/**
 * 加盟店向けの表示ステータスを取得
 * @param {string} actualStatus - 実際のステータス
 * @return {string} 表示用ステータス
 */
function getDisplayStatus(actualStatus) {
  // サイレントの場合はアクティブとして表示
  if (actualStatus === 'サイレント') {
    return 'アクティブ';
  }
  return actualStatus;
}