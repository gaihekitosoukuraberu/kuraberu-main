<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>本部管理画面 - 案件割り振りシステム</title>
    <!-- キャッシュ無効化 -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', system-ui, sans-serif; }
        .glass { backdrop-filter: blur(12px); }
        .neon-blue { box-shadow: 0 0 30px rgba(59, 130, 246, 0.5); }
        .neon-green { box-shadow: 0 0 30px rgba(34, 197, 94, 0.5); }
        .form-section {
            background: white;
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }
        .button-group {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 8px;
        }
        .option-button {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .option-button:hover {
            background: #e2e8f0;
        }
        .option-button.selected {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }
        .time-slots {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
            gap: 8px;
            margin-top: 8px;
        }
        .time-slot {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            padding: 8px;
            text-align: center;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .time-slot:hover {
            background: #e2e8f0;
        }
        .time-slot.selected {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }
        .ai-button {
            background: linear-gradient(135deg, #8b5cf6 0%, #3b82f6 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        .ai-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }
        .map-button {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            margin-left: 8px;
        }
        .hearing-status {
            background-color: #fef3c7;
            color: #d97706;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }
        .selected-franchise {
            background-color: #fed7aa;
            color: #9a3412;
        }
        .franchise-item {
            background: #fef7ed;
            border: 1px solid #fed7aa;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
        }
        .franchise-item.selected {
            background: #fed7aa;
            border-color: #f97316;
        }
        .case-card.selected {
            background: #dbeafe;
            border-color: #3b82f6;
            transform: scale(1.02);
        }

        /* アクションボタンの横書きを強制 */
        button {
            writing-mode: horizontal-tb !important;
            text-orientation: mixed !important;
            white-space: nowrap !important;
        }

        /* テーブル内のボタンの特定スタイル */
        table button,
        .mobile-card button {
            writing-mode: horizontal-tb !important;
            text-orientation: mixed !important;
            white-space: nowrap !important;
            min-width: auto !important;
            display: inline-block !important;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">
    <!-- ログイン画面 -->
    <div id="loginScreen" class="fixed inset-0 bg-gradient-to-br from-blue-50 to-indigo-100 z-[100] flex items-center justify-center">
        <div class="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md">
            <div class="text-center mb-8">
                <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full mb-4">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                    </svg>
                </div>
                <h1 class="text-2xl font-bold text-gray-800">本部管理システム</h1>
                <p class="text-gray-500 mt-2">ログインしてください</p>
            </div>
            
            <form id="loginForm" onsubmit="handleLogin(event)">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">ユーザーID</label>
                    <input type="text" id="userId" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="ユーザーIDを入力">
                </div>
                
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">パスワード</label>
                    <input type="password" id="password" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="パスワードを入力">
                </div>
                
                <div class="mb-4">
                    <label class="flex items-center">
                        <input type="checkbox" id="rememberMe" class="rounded text-blue-600 focus:ring-blue-500">
                        <span class="ml-2 text-sm text-gray-600">ログイン状態を保持する</span>
                    </label>
                </div>
                
                <button type="submit" class="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-2 px-4 rounded-lg hover:from-blue-600 hover:to-indigo-700 font-medium transition-all transform hover:scale-[1.02]">
                    ログイン
                </button>
                
                <div id="loginError" class="mt-4 text-red-600 text-sm text-center hidden"></div>
            </form>
            
            <div class="mt-6 text-center">
                <a href="#" class="text-sm text-blue-600 hover:text-blue-800">パスワードを忘れた方はこちら</a>
            </div>
        </div>
    </div>

    <!-- メインアプリケーション（初期状態は非表示） -->
    <div id="mainApp" class="hidden">
    <!-- トップバー -->
    <div class="fixed top-0 left-0 right-0 z-50 h-16 bg-gray-900/95 glass border-b border-gray-200">
        <div class="flex items-center justify-between h-full px-6">
            <div class="flex items-center space-x-4">
                <button onclick="toggleMenu()" class="p-2 rounded-lg hover:bg-gray-800 transition-colors">
                    <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                </button>
                <div class="flex items-center space-x-2">
                    <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                        <span class="text-gray-100 font-bold">本</span>
                    </div>
                    <span class="text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                        本部管理システム
                    </span>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <div class="relative">
                    <button class="p-2 rounded-lg hover:bg-gray-800 transition-colors">
                        <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                        </svg>
                        <span class="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full animate-pulse"></span>
                    </button>
                </div>
                <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-gradient-to-br from-green-500 to-blue-500 rounded-full"></div>
                    <span class="text-sm text-gray-700">管理者</span>
                </div>
            </div>
        </div>
    </div>

    <!-- サイドメニュー -->
    <div id="sideMenu" class="fixed left-0 top-16 bottom-0 w-64 bg-gray-900/95 glass border-r border-gray-200 transform -translate-x-full transition-transform z-40">
        <nav class="p-4 space-y-2">
            <a href="#dashboard" onclick="showSection('dashboard'); return false;" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-gray-100">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                ダッシュボード
            </a>
            <a href="#assignment" onclick="showSection('assignment'); return false;" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-gray-100 relative">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                </svg>
                案件管理
                <span class="ml-auto bg-red-500 text-white text-xs px-2.5 py-1 rounded-full animate-pulse font-bold shadow-lg" title="未処理案件5件">
                    <span class="inline-block">5</span>
                    <span class="absolute -top-1 -right-1 w-3 h-3 bg-red-400 rounded-full animate-ping"></span>
                </span>
            </a>
            <a href="#franchise" onclick="showSection('franchise'); return false;" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-gray-100">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                加盟店管理
            </a>
            <a href="#registration-requests" onclick="showSection('registrationRequests'); return false;" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-gray-100 relative">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                </svg>
                加盟店登録申請
                <span id="registrationRequestBadge" class="ml-auto bg-green-500 text-white text-xs px-2.5 py-1 rounded-full animate-pulse font-bold shadow-lg" style="display:none;">
                    <span class="badge-count inline-block">0</span>
                    <span class="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-ping"></span>
                </span>
            </a>
            <a href="#cancel-requests" onclick="showSection('cancelRequests'); return false;" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-gray-100 relative">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                キャンセル申請
                <span id="cancelRequestBadge" class="ml-auto bg-purple-500 text-white text-xs px-2.5 py-1 rounded-full animate-pulse font-bold shadow-lg">
                    <span class="inline-block">2</span>
                    <span class="absolute -top-1 -right-1 w-3 h-3 bg-purple-400 rounded-full animate-ping"></span>
                </span>
            </a>
            <a href="#financial" onclick="showSection('financial'); return false;" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-gray-100">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                請求・財務
            </a>
            <a href="#ranking" onclick="showSection('ranking'); return false;" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-800 text-gray-400 hover:text-gray-100">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                ランキング
            </a>
        </nav>
    </div>

    <!-- メインコンテンツ -->
    <main class="pt-20 px-6">
            <!-- ヘッダー -->
            <div class="flex justify-between items-center mb-6">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">案件管理</h1>
                </div>
                <div class="flex items-center space-x-2">
                    <button onclick="createNewCase()" class="bg-green-500 text-white px-4 py-2 rounded-lg font-medium hover:bg-green-600 transition-all flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        新規作成
                    </button>
                    <button onclick="location.reload()" class="bg-blue-400 text-white p-2 rounded-lg hover:bg-blue-500 transition-all" title="更新">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                    </button>
                    <button onclick="saveAllData()" class="bg-pink-400 text-white px-4 py-2 rounded-lg font-medium hover:bg-pink-500 transition-all flex items-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V2" />
                        </svg>
                        保存
                    </button>
                </div>
            </div>

            <!-- 案件一覧 -->
            <div class="form-section py-4">
                
                <!-- 検索・フィルターダッシュボード（レスポンシブ版） -->
                <div class="bg-white rounded-lg p-3 mb-4 border border-gray-200">
                    <!-- モバイル: 縦並び、PC: すべて横一列 -->
                    <div class="flex flex-wrap items-center gap-2">
                        <!-- 統計ボタン群 -->
                        <button onclick="filterByNewStatus()" class="flex items-center space-x-1 px-3 py-1.5 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow hover:shadow-md transition-all cursor-pointer">
                            <span class="text-lg font-bold" id="newCount">0</span>
                            <span class="text-xs">新規</span>
                        </button>
                        <button onclick="filterByProspect()" class="flex items-center space-x-1 px-3 py-1.5 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white rounded-lg shadow hover:shadow-md transition-all cursor-pointer">
                            <span class="text-lg font-bold" id="prospectCount">0</span>
                            <span class="text-xs">見込み</span>
                        </button>
                        <button onclick="filterByAbsent()" class="flex items-center space-x-1 px-3 py-1.5 bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-lg shadow hover:shadow-md transition-all cursor-pointer">
                            <span class="text-lg font-bold" id="absentCount">0</span>
                            <span class="text-xs">対応中</span>
                        </button>
                        <div class="flex items-center space-x-1 px-3 py-1.5 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg shadow">
                            <span class="text-lg font-bold" id="predictedAmount">¥0</span>
                            <span class="text-xs">予測</span>
                        </div>
                        
                        <!-- PC用スペーサー（左寄せから右寄せに切り替え） -->
                        <div class="hidden lg:block lg:flex-1"></div>
                        
                        <!-- 検索・ソートコントロール（PCでは右側、モバイルでは下段） -->
                        <div class="flex items-center gap-2 w-full lg:w-auto">
                            <!-- 検索ボックス -->
                            <div class="flex-1 lg:flex-none lg:w-40">
                                <div class="relative">
                                    <input type="search" id="searchInput" placeholder="検索..." oninput="searchRegistrations()" autocomplete="off" class="w-full pl-7 pr-2 py-1 text-xs border border-gray-300 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-transparent touch-manipulation">
                                    <div class="absolute left-2 top-1.5">
                                        <svg class="w-3.5 h-3.5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- ソートボタン -->
                            <button onclick="openSortModal()" class="px-3 py-1 bg-gradient-to-r from-gray-600 to-gray-700 text-white rounded-lg text-xs font-medium shadow hover:shadow-md transition-all">
                                ソート
                            </button>
                            
                            <!-- ソートオプション -->
                            <select id="sortSelect" class="px-2 py-1 border border-gray-300 rounded-lg text-xs bg-white">
                                <option value="date-desc">新着順</option>
                                <option value="date-asc">古い順</option>
                                <option value="amount-desc">金額順</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- ビュー切り替えタブ -->
                <div class="mb-6 mt-8">
                    <div class="flex items-center justify-between">
                        <div class="flex space-x-1 bg-gray-100 p-1 rounded-lg inline-flex">
                            <button id="listViewBtn" class="px-4 py-2 bg-white rounded-md text-sm font-medium text-gray-900 transition-all" onclick="switchView('list')">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                                </svg>
                                リスト
                            </button>
                            <button id="crmViewBtn" class="px-4 py-2 rounded-md text-sm font-medium text-gray-600 hover:text-gray-900 transition-all" onclick="switchView('crm')">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                </svg>
                                CRM
                            </button>
                        </div>
                        <div class="flex items-center gap-4">
                            <!-- 選択件数表示 -->
                            <div class="text-sm text-gray-600 hidden" id="selectionCountDisplay">
                                選択: <span class="font-semibold text-blue-600" id="selectedCount">0</span> / <span class="font-semibold" id="currentPageCount">0</span> 件
                            </div>
                            <!-- 表示件数切り替え -->
                            <select id="itemsPerPage" class="text-sm border border-gray-300 rounded px-2 py-1" onchange="changeItemsPerPage()">
                                <option value="30">30件</option>
                                <option value="50">50件</option>
                                <option value="100">100件</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- リストビュー -->
                <div id="listView" class="block">
                    <div class="bg-white rounded-lg border border-gray-200">
                        <!-- PC用テーブル表示 -->
                        <div class="overflow-x-auto hidden md:block">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            <input type="checkbox" class="rounded text-blue-600" id="selectAll" onchange="toggleSelectAll()">
                                        </th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            ステータス
                                        </th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            顧客名
                                        </th>
                                        <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            クイック
                                        </th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            物件
                                        </th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            紹介料
                                        </th>
                                        <th class="px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            詳細
                                        </th>
                                    </tr>
                                </thead>
                                <tbody id="casesListBody" class="bg-white divide-y divide-gray-200">
                                    <!-- 動的に生成される案件リスト -->
                                </tbody>
                            </table>
                        </div>

                        <!-- モバイル用カード表示 -->
                        <div id="casesListMobile" class="md:hidden p-4 space-y-4">
                            <!-- 動的に生成される案件カード -->
                        </div>
                    </div>

                    <!-- ページネーション -->
                    <div class="flex justify-between items-center mt-4 px-4 py-3 bg-gray-50 border-t">
                        <div class="text-sm text-gray-700">
                            全<span id="totalCount">0</span>件中 <span id="showingFrom">0</span>-<span id="showingTo">0</span>件を表示
                        </div>
                        <div class="flex gap-2">
                            <button onclick="previousPage()" id="prevBtn" class="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                前へ
                            </button>
                            <div class="flex items-center gap-1" id="pageNumbers">
                                <!-- ページ番号が動的に生成される -->
                            </div>
                            <button onclick="nextPage()" id="nextBtn" class="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                次へ
                            </button>
                        </div>
                    </div>
                </div>

                <!-- CRMビュー（初期非表示） -->
                <div id="crmView" class="hidden">
                    <div class="bg-white rounded-lg border border-gray-200">
                        <!-- CRMヘッダー -->
                        <div class="border-b px-6 py-4 bg-gray-50">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-4">
                                    <!-- ステータスドロップダウン -->
                                    <select id="crmStatus" class="text-lg font-semibold border rounded px-3 py-2" onchange="changeCRMStatus(this.value)">
                                        <option value="新規">新規</option>
                                        <option value="不在">不在</option>
                                        <option value="再架電">再架電</option>
                                        <option value="見込み">見込み</option>
                                        <option value="ロスト">ロスト</option>
                                        <option value="配信中">配信中</option>
                                        <option value="配信済">配信済</option>
                                        <option value="他社契約済">他社契約済</option>
                                        <option value="無効">無効</option>
                                        <option value="クレーム">クレーム</option>
                                    </select>
                                    <!-- 架電履歴ボタン -->
                                    <div class="relative group inline-block">
                                        <button onclick="openCallHistoryModal()" class="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-all text-2xl" title="架電履歴">
                                            📝
                                        </button>
                                        <!-- メモ履歴のホバー表示 -->
                                        <div class="absolute top-full left-0 mt-2 hidden group-hover:block z-50 w-64">
                                            <div class="bg-gray-900 text-white text-xs rounded-lg py-2 px-3">
                                                <div class="font-semibold mb-1">メモ履歴:</div>
                                                <div id="crmMemoPreview">メモはまだありません</div>
                                                <div class="absolute bottom-full left-4 -mb-1">
                                                    <div class="border-4 border-transparent border-b-gray-900"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex space-x-2">
                                    <button onclick="previousCase()" class="px-4 py-2 bg-white text-gray-700 rounded-lg border hover:bg-gray-50 transition-all">
                                        ← 前の案件
                                    </button>
                                    <button onclick="nextCase()" class="px-4 py-2 bg-white text-gray-700 rounded-lg border hover:bg-gray-50 transition-all">
                                        次の案件 →
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- CRMコンテンツ（既存のフォーム部分） -->
                        <div class="p-6" id="crmContent">
                            <!-- ここに既存のフォームが入る -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- ご本人さま情報（元の場所、CRM用にも使用） -->
            <div id="originalFormContent" style="display: none;">
            <div class="form-section">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">ご本人さま情報</h2>
                <div class="grid grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">氏名（漢字）</label>
                        <input type="text" value="田中太郎" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">氏名（カナ）</label>
                        <input type="text" value="タナカタロウ" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">電話番号</label>
                        <input type="tel" value="090-1234-5678" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">性別</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option selected>男性</option>
                            <option>女性</option>
                            <option>その他</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">年齢</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option>20代</option>
                            <option>30代</option>
                            <option selected>40代</option>
                            <option>50代</option>
                            <option>60代</option>
                            <option>70代以上</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">関係性</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option selected>本人</option>
                            <option>配偶者</option>
                            <option>その他</option>
                        </select>
                    </div>
                    <div class="col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-1">メールアドレス</label>
                        <input type="email" value="example@email.com" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                </div>
            </div>

            <!-- 物件プロフィール -->
            <div class="form-section">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">物件プロフィール</h2>
                <div class="grid grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">依頼物件種別</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option selected>戸建て</option>
                            <option>マンション</option>
                            <option>アパート</option>
                            <option>店舗・事務所</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">階数</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option selected>2階建て</option>
                            <option>3階建て</option>
                            <option>平屋</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">築年数</label>
                        <input type="text" value="15年" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">延べ床面積</label>
                        <input type="text" value="120㎡" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">施工回数</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option selected>初回</option>
                            <option>2回目</option>
                            <option>3回目以上</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">前回施工時期</label>
                        <input type="text" placeholder="例: 10年前" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">外壁材質</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option selected>サイディング</option>
                            <option>モルタル</option>
                            <option>ALC</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">屋根材質</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option selected>スレート</option>
                            <option>瓦</option>
                            <option>金属</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">郵便番号</label>
                        <div class="flex items-center">
                            <input type="text" value="150-0001" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <button class="map-button" onclick="generateGoogleMapLink('150-0001')">〒取得</button>
                        </div>
                    </div>
                    <div class="col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-1">対象物件住所</label>
                        <div class="flex items-center">
                            <input type="text" value="東京都渋谷区神宮前1-1-1" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        </div>
                    </div>
                    <div class="col-span-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">物件情報リンク</label>
                        <div class="flex items-center">
                            <input type="text" value="Google Map ストリートビューURL" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <button class="bg-green-500 text-white px-4 py-2 rounded-md ml-2" onclick="generateGoogleMapLink()">生成</button>
                            <button class="bg-gray-500 text-white px-4 py-2 rounded-md ml-2" onclick="openMapLink()">開く</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 見積もり・工事に関するご要望 -->
            <div class="form-section">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">見積もり・工事に関するご要望</h2>
                
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">見積もり希望箇所</label>
                    <div class="button-group">
                        <button class="option-button">外壁塗装</button>
                        <button class="option-button">外壁カバー工法</button>
                        <button class="option-button">外壁張替え</button>
                        <button class="option-button">屋根塗装</button>
                        <button class="option-button">屋上防水</button>
                        <button class="option-button">屋根葺き替え・張り替え（スレート・ガルバリウム等）</button>
                        <button class="option-button">屋根葺き替え・張り替え（瓦）</button>
                        <button class="option-button">屋根カバー工法</button>
                        <button class="option-button">外壁補修</button>
                        <button class="option-button">屋根補修</button>
                        <button class="option-button">ベランダ防水</button>
                        <button class="option-button">内装水回り（バス・キッチン・トイレ）</button>
                        <button class="option-button">内装（フローリングや畳などの床・クロス等）</button>
                        <button class="option-button">屋根塗装単品</button>
                        <button class="option-button">屋上防水単品</button>
                        <button class="option-button">外壁補修単品</button>
                        <button class="option-button">屋根補修単品</button>
                        <button class="option-button">ベランダ防水単品</button>
                    </div>
                </div>

                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">特殊要件・対応条件</label>
                    <div class="button-group">
                        <button class="option-button">遮熱・断熱塗料提案可能</button>
                        <button class="option-button">立ち会いなし・見積もり手渡し希望</button>
                        <button class="option-button">遠方につき立ち会いなし・見積もり郵送・電話で商談可</button>
                        <button class="option-button">エクステリア（庭・駐車場・外構）</button>
                        <button class="option-button">太陽光パネル脱着（撤去含む）</button>
                        <button class="option-button">提携先ローン有り</button>
                        <button class="option-button">クレジットカード払い可</button>
                        <button class="option-button">火災保険申請サポート</button>
                        <button class="option-button">助成金申請サポート</button>
                        <button class="option-button">建築許可証</button>
                        <button class="option-button">光触媒塗料提案可</button>
                        <button class="option-button">分割払いプラン有</button>
                    </div>
                </div>

                <div class="grid grid-cols-3 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">希望社数</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>1社</option>
                            <option>2社</option>
                            <option selected>3社</option>
                            <option>4社</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">施工時期</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option>すぐに</option>
                            <option>そろそろ</option>
                            <option>3ヶ月以内</option>
                            <option>半年以内</option>
                            <option>未定</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">他社見積もり状況</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option>取得済み</option>
                            <option>依頼中</option>
                            <option>未取得</option>
                            <option>検討中</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">他社見積もり数</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option>0社</option>
                            <option>1社</option>
                            <option>2社</option>
                            <option>3社以上</option>
                            <option>未定</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- 現地調査・立ち会い関連 -->
            <div class="form-section">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">現地調査・立ち会い関連</h2>
                <div class="grid grid-cols-2 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">立ち会い可否</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option>可能</option>
                            <option>不可能</option>
                            <option>要相談</option>
                            <option>立ち会いなし・見積もり手渡し希望</option>
                            <option>遠方につき立ち会いなし・見積もり郵送・電話で商談可</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">立ち会い者関係性</label>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option>選択してください</option>
                            <option>本人</option>
                            <option>配偶者</option>
                            <option>家族</option>
                            <option>その他</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- 連絡方法・その他 -->
            <div class="form-section">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">連絡方法・その他</h2>
                
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">連絡時間帯</label>
                    
                    <div class="mb-3">
                        <div class="text-xs text-gray-500 mb-1">曜日:</div>
                        <div class="flex flex-wrap gap-1">
                            <button type="button" onclick="addTimeStamp('月')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">月</button>
                            <button type="button" onclick="addTimeStamp('火')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">火</button>
                            <button type="button" onclick="addTimeStamp('水')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">水</button>
                            <button type="button" onclick="addTimeStamp('木')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">木</button>
                            <button type="button" onclick="addTimeStamp('金')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">金</button>
                            <button type="button" onclick="addTimeStamp('土')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">土</button>
                            <button type="button" onclick="addTimeStamp('日')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">日</button>
                            <button type="button" onclick="addTimeStamp('祝')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">祝</button>
                            <button type="button" onclick="addTimeStamp('平日')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">平日</button>
                            <button type="button" onclick="addTimeStamp('土日')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">土日</button>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="text-xs text-gray-500 mb-1">時間帯:</div>
                        <div class="flex flex-wrap gap-1">
                            <button type="button" onclick="addTimeStamp('午前')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">午前</button>
                            <button type="button" onclick="addTimeStamp('午後')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">午後</button>
                            <button type="button" onclick="addTimeStamp('時頃')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">時頃</button>
                            <button type="button" onclick="addTimeStamp('時〜')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">時〜</button>
                            <button type="button" onclick="addTimeStamp('時')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">時</button>
                            <button type="button" onclick="addTimeStamp('随時')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">随時</button>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="text-xs text-gray-500 mb-1">数字:</div>
                        <div class="flex flex-wrap gap-1">
                            <button type="button" onclick="addTimeStamp('0')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">0</button>
                            <button type="button" onclick="addTimeStamp('1')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">1</button>
                            <button type="button" onclick="addTimeStamp('2')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">2</button>
                            <button type="button" onclick="addTimeStamp('3')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">3</button>
                            <button type="button" onclick="addTimeStamp('4')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">4</button>
                            <button type="button" onclick="addTimeStamp('5')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">5</button>
                            <button type="button" onclick="addTimeStamp('6')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">6</button>
                            <button type="button" onclick="addTimeStamp('7')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">7</button>
                            <button type="button" onclick="addTimeStamp('8')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">8</button>
                            <button type="button" onclick="addTimeStamp('9')" class="px-3 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400">9</button>
                        </div>
                    </div>
                    
                    <div class="text-xs text-gray-500 mb-1">ボタンを選択して連絡時間帯を入力してください</div>
                    <textarea id="contactTimeInput" rows="2" placeholder="例: 月火水 午前中、土日 19時以降" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"></textarea>
                </div>

                <div class="mb-6">
                    <label class="flex items-center text-sm font-medium text-gray-700 mb-2 cursor-pointer">
                        <input type="checkbox" id="estimateAddressCheck" onchange="toggleEstimateAddress()" class="mr-2 rounded text-blue-600">
                        <span>見積もり送付先住所（郵送希望の場合）</span>
                    </label>
                    <div id="estimateAddressArea" class="hidden">
                        <div class="flex items-center gap-2 mb-2">
                            <input type="text" id="estimatePostalCode" placeholder="〒150-0001" class="px-3 py-1 border border-gray-300 rounded-md text-sm w-32">
                            <button type="button" onclick="fetchAddressFromPostal()" class="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600">住所取得</button>
                        </div>
                        <input type="text" id="estimateAddress" placeholder="住所が自動入力されます" class="w-full px-3 py-1 border border-gray-300 rounded-md text-sm">
                    </div>
                </div>

                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-1">流入検索ワード</label>
                    <input type="text" value="外壁塗装 東京" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                </div>
            </div>

            <!-- 案件メモ -->
            <div class="form-section">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">案件メモ</h2>
                <textarea rows="4" placeholder="顧客からの要望や特記事項を入力..." class="w-full px-3 py-2 border border-gray-300 rounded-md mb-4"></textarea>
                <div class="flex justify-end">
                    <button class="ai-button">AI全項目添削</button>
                </div>
            </div>

            <!-- 業者選択・振り分け -->
            <div class="form-section">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">選択中 流入時に選択された業者</h2>
                
                <!-- 希望社数と業者検索（上段） -->
                <div class="flex items-center gap-4 mb-4">
                    <div class="flex items-center">
                        <label class="text-sm text-gray-600 mr-2">希望社数:</label>
                        <select id="franchiseCount" class="px-3 py-2 border border-gray-300 rounded text-sm">
                            <option>1社</option>
                            <option>2社</option>
                            <option selected>3社</option>
                            <option>4社</option>
                        </select>
                    </div>
                    <div class="flex-1">
                        <div class="relative">
                            <input type="text" 
                                   id="franchiseSearch" 
                                   list="franchiseList"
                                   placeholder="業者を検索（名前で検索）" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded text-sm"
                                   oninput="searchFranchise(this.value)">
                            <datalist id="franchiseList">
                                <option value="東京都市部塗装">
                                <option value="神奈川県央建設">
                                <option value="千葉外装工業">
                                <option value="埼玉リフォーム">
                            </datalist>
                        </div>
                    </div>
                    <button class="bg-orange-500 text-white px-4 py-2 rounded text-sm">候補変更</button>
                </div>
                
                <!-- フィルターボタン（下段） -->
                <div class="flex space-x-2 mb-6">
                    <button onclick="sortFranchises('selected')" class="franchise-sort-btn bg-blue-600 text-white px-4 py-2 rounded text-sm" data-sort="selected">選択中</button>
                    <button onclick="sortFranchises('price')" class="franchise-sort-btn bg-gray-200 text-gray-700 px-4 py-2 rounded text-sm" data-sort="price">安い順</button>
                    <button onclick="sortFranchises('recommend')" class="franchise-sort-btn bg-gray-200 text-gray-700 px-4 py-2 rounded text-sm" data-sort="recommend">おすすめ</button>
                    <button onclick="sortFranchises('review')" class="franchise-sort-btn bg-gray-200 text-gray-700 px-4 py-2 rounded text-sm" data-sort="review">口コミ順</button>
                    <button onclick="sortFranchises('quality')" class="franchise-sort-btn bg-gray-200 text-gray-700 px-4 py-2 rounded text-sm" data-sort="quality">高品質順</button>
                    <button onclick="sortFranchises('distance')" class="franchise-sort-btn bg-gray-200 text-gray-700 px-4 py-2 rounded text-sm" data-sort="distance">距離順</button>
                </div>

                <!-- 業者リスト -->
                <div id="franchiseListContainer" class="space-y-4">
                    <div class="franchise-item selected cursor-pointer" onclick="toggleFranchise(this)" data-franchise-id="FRANCHISE_001">
                        <div class="flex items-center justify-between pointer-events-none">
                            <div class="flex items-center">
                                <div class="text-lg font-semibold mr-2">1</div>
                                <input type="checkbox" checked class="mr-4 pointer-events-auto" onclick="event.stopPropagation()">
                                <div>
                                    <div class="font-semibold text-gray-900">東京都市部塗装</div>
                                    <div class="selected-franchise text-xs mt-1">お客様選択</div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-sm text-gray-600">東京都 神奈川県</div>
                                <div class="text-blue-600 text-sm">選択済み</div>
                                <div class="text-xs text-gray-500">100% マッチ</div>
                            </div>
                        </div>
                    </div>

                    <div class="franchise-item selected cursor-pointer" onclick="toggleFranchise(this)" data-franchise-id="FRANCHISE_002">
                        <div class="flex items-center justify-between pointer-events-none">
                            <div class="flex items-center">
                                <div class="text-lg font-semibold mr-2">2</div>
                                <input type="checkbox" checked class="mr-4 pointer-events-auto" onclick="event.stopPropagation()">
                                <div>
                                    <div class="font-semibold text-gray-900">神奈川県央建設</div>
                                    <div class="selected-franchise text-xs mt-1">お客様選択</div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-sm text-gray-600">神奈川県 東京都</div>
                                <div class="text-blue-600 text-sm">選択済み</div>
                                <div class="text-xs text-gray-500">100% マッチ</div>
                            </div>
                        </div>
                    </div>

                    <div class="franchise-item selected cursor-pointer" onclick="toggleFranchise(this)" data-franchise-id="FRANCHISE_003">
                        <div class="flex items-center justify-between pointer-events-none">
                            <div class="flex items-center">
                                <div class="text-lg font-semibold mr-2">3</div>
                                <input type="checkbox" checked class="mr-4 pointer-events-auto" onclick="event.stopPropagation()">
                                <div>
                                    <div class="font-semibold text-gray-900">千葉外装工業</div>
                                    <div class="selected-franchise text-xs mt-1">お客様選択</div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-sm text-gray-600">千葉県 東京都</div>
                                <div class="text-blue-600 text-sm">選択済み</div>
                                <div class="text-xs text-gray-500">100% マッチ</div>
                            </div>
                        </div>
                    </div>

                    <div class="franchise-item">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="text-lg font-semibold mr-2">4</div>
                                <input type="checkbox" class="mr-4">
                                <div>
                                    <div class="font-semibold text-gray-900">埼玉リフォーム</div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-sm text-gray-600">埼玉県 東京都</div>
                                <div class="text-blue-600 text-sm">追加候補</div>
                                <div class="text-xs text-gray-500">100% マッチ</div>
                            </div>
                        </div>
                    </div>
                </div>


                <!-- アクションボタン -->
                <div class="flex justify-center mt-8">
                    <button class="bg-green-500 text-white px-8 py-3 rounded-lg font-semibold text-lg hover:bg-green-600 transition-all">オーダー転送</button>
                </div>
            </div>
            </div><!-- originalFormContent終了 -->
    </main>

    <!-- 架電履歴モーダル -->
    <div id="callHistoryModal" class="fixed inset-0 z-50 hidden">
        <div class="fixed inset-0 bg-black/50" onclick="closeCallHistoryModal()"></div>
        <div class="fixed inset-0 flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">メモ</h3>
                    <button onclick="closeCallHistoryModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                
                <!-- 新規メモ入力 -->
                <div class="mb-6">
                    <textarea id="newCallNote" placeholder="メモを入力..." class="w-full p-3 border rounded-lg resize-none" rows="3"></textarea>
                    <div class="flex items-center gap-4 mt-3">
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-1">次回架電日</label>
                            <input type="date" id="nextCallDate" class="w-full px-3 py-2 border rounded-lg">
                        </div>
                        <button onclick="addCallHistory()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                            保存
                        </button>
                    </div>
                </div>
                
                <!-- 履歴リスト -->
                <div id="callHistoryList" class="space-y-3">
                    <!-- 動的に生成される履歴 -->
                </div>
            </div>
        </div>
    </div>
    
    <!-- ソートモーダル -->
    <div id="sortModal" class="fixed inset-0 z-50 hidden">
        <div class="fixed inset-0 bg-black/50" onclick="closeSortModal()"></div>
        <div class="fixed inset-0 flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">ステータス別ソート</h3>
                    <button onclick="closeSortModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                
                <!-- すべて表示ボタン -->
                <div class="mb-4">
                    <button onclick="showAllCases()" class="w-full px-4 py-2.5 bg-gradient-to-r from-gray-100 to-white text-gray-800 border border-gray-300 rounded-lg shadow hover:shadow-lg transition-all font-medium">
                        すべて表示
                    </button>
                </div>
                
                <!-- 管理ステータス -->
                <div class="mb-4">
                    <h4 class="text-sm font-medium text-gray-700 mb-2">管理ステータス</h4>
                    <div class="grid grid-cols-2 gap-2">
                        <button onclick="filterBySpecificStatus('不在')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">不在</button>
                        <button onclick="filterBySpecificStatus('再架電')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">再架電</button>
                        <button onclick="filterBySpecificStatus('見込み')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">見込み</button>
                        <button onclick="filterBySpecificStatus('ロスト')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">ロスト</button>
                        <button onclick="filterBySpecificStatus('配信中')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">配信中</button>
                        <button onclick="filterBySpecificStatus('配信済')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">配信済</button>
                        <button onclick="filterBySpecificStatus('他社契約済')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">他社契約済</button>
                        <button onclick="filterBySpecificStatus('無効')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">無効</button>
                        <button onclick="filterBySpecificStatus('クレーム')" class="px-3 py-2 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">クレーム</button>
                    </div>
                </div>
                
                <!-- 配信後ステータス -->
                <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-2">配信後ステータス</h4>
                    <div class="grid grid-cols-2 gap-2">
                        <button onclick="filterBySpecificStatus('アポ済')" class="px-3 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">アポ済</button>
                        <button onclick="filterBySpecificStatus('現調済')" class="px-3 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">現調済</button>
                        <button onclick="filterBySpecificStatus('見積提出済')" class="px-3 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">見積提出済</button>
                        <button onclick="filterBySpecificStatus('入金予定')" class="px-3 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">入金予定</button>
                        <button onclick="filterBySpecificStatus('完了')" class="px-3 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">完了</button>
                        <button onclick="filterBySpecificStatus('紹介後キャンセル')" class="px-3 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">紹介後キャンセル</button>
                        <button onclick="filterBySpecificStatus('現調前キャンセル')" class="px-3 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">現調前キャンセル</button>
                        <button onclick="filterBySpecificStatus('現調後ロスト')" class="px-3 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">現調後ロスト</button>
                        <button onclick="filterBySpecificStatus('他社契約済')" class="px-3 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg shadow hover:shadow-md transition-all text-sm font-medium">他社契約済</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- モーダル -->
    <div id="modal" class="fixed inset-0 z-50 hidden">
        <div class="fixed inset-0 bg-black/70 backdrop-blur-sm" onclick="closeModal()"></div>
        <div class="fixed inset-0 flex items-center justify-center p-4">
            <div class="relative w-full max-w-4xl bg-gray-900 rounded-2xl shadow-2xl border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h3 class="text-xl font-bold text-gray-100">案件詳細・割り振り設定</h3>
                        <button onclick="closeModal()" class="p-2 hover:bg-gray-800 rounded-lg transition-colors">
                            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="p-6">
                    <div class="grid grid-cols-2 gap-6">
                        <div>
                            <h4 class="text-lg font-semibold text-gray-100 mb-4">顧客情報</h4>
                            <dl class="space-y-3">
                                <div>
                                    <dt class="text-sm text-gray-400">顧客名</dt>
                                    <dd class="text-gray-100 font-medium">田中太郎</dd>
                                </div>
                                <div>
                                    <dt class="text-sm text-gray-400">建物種別</dt>
                                    <dd><span class="badge badge-info">戸建て</span></dd>
                                </div>
                                <div>
                                    <dt class="text-sm text-gray-400">希望工事</dt>
                                    <dd class="text-gray-100">外壁塗装、屋根塗装（外壁工事含む）</dd>
                                </div>
                            </dl>
                        </div>
                        
                        <div>
                            <h4 class="text-lg font-semibold text-gray-100 mb-4">紹介料設定</h4>
                            <div class="space-y-4">
                                <div>
                                    <label class="text-sm text-gray-400">自動計算額</label>
                                    <div class="text-2xl font-bold text-emerald-400">¥20,000</div>
                                </div>
                                <div>
                                    <label class="text-sm text-gray-400">手動調整</label>
                                    <div class="flex space-x-2 mt-2">
                                        <button class="px-4 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm">¥5,000</button>
                                        <button class="px-4 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm">¥10,000</button>
                                        <button class="px-4 py-2 bg-blue-600 rounded-lg text-sm">¥20,000</button>
                                        <button class="px-4 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm">¥30,000</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6">
                        <h4 class="text-lg font-semibold text-gray-100 mb-4">AI推薦加盟店</h4>
                        <div class="space-y-3">
                            <div class="p-4 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors cursor-pointer">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-3">
                                        <input type="checkbox" class="rounded border-gray-600 bg-gray-700">
                                        <div>
                                            <div class="font-medium text-gray-900">東京ペイント工業 <span class="text-xs text-gray-500">F0001</span></div>
                                            <div class="text-sm text-gray-400 mt-1">AIスコア: <span class="text-blue-400 font-medium">95</span></div>
                                        </div>
                                    </div>
                                    <div class="flex gap-2">
                                        <span class="px-2 py-1 bg-emerald-500/20 text-emerald-400 text-xs rounded-full">デポジット有</span>
                                        <span class="px-2 py-1 bg-blue-500/20 text-blue-400 text-xs rounded-full">最優先エリア</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 flex justify-end space-x-3">
                        <button onclick="closeModal()" class="px-5 py-2.5 bg-gray-800 hover:bg-gray-700 rounded-lg font-medium">
                            キャンセル
                        </button>
                        <button class="px-5 py-2.5 bg-blue-600 hover:bg-blue-500 rounded-lg font-medium neon-blue">
                            転送実行
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // エラーハンドリング
        window.addEventListener('error', function(e) {
            console.error('JavaScript Error:', e.message, 'at', e.filename, ':', e.lineno, ':', e.colno);
            console.error('Error object:', e.error);
        });
        
        try {
            console.log('Script initialization starting...');
        } catch(e) {
            console.error('Initialization error:', e);
        }
        
        function toggleMenu() {
            const menu = document.getElementById('sideMenu');
            menu.classList.toggle('-translate-x-full');
        }

        // メインコンテンツエリアクリックでメニューを閉じる
        document.addEventListener('click', function(e) {
            const menu = document.getElementById('sideMenu');
            const menuButton = document.querySelector('[onclick="toggleMenu()"]');
            
            // クリックがメニュー外でかつメニューボタン以外の場合
            if (!menu.contains(e.target) && e.target !== menuButton && !menuButton.contains(e.target)) {
                menu.classList.add('-translate-x-full');
            }
        });
        
        function openModal() {
            document.getElementById('modal').classList.remove('hidden');
        }
        
        function closeModal() {
            document.getElementById('modal').classList.add('hidden');
        }

        // ハンデキャップ更新機能
        function updateHandicap(franchiseId, value) {
            // ハンデキャップ値を保存（実際のアプリケーションではAPIコールを行う）
            console.log(`加盟店 ${franchiseId} のハンデを ${value} に更新しました`);

            // 成功メッセージを表示（オプション）
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            notification.textContent = `ハンデを ${value} に更新しました`;
            document.body.appendChild(notification);

            // 3秒後に通知を削除
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // 加盟店ステータス更新機能
        function updateFranchiseStatus(franchiseId, status) {
            const select = document.querySelector(`[data-franchise-id="${franchiseId}"]`);

            // ステータスに応じて色を変更
            const statusColors = {
                'active': 'bg-green-100 text-green-800 border-green-300',
                'inactive': 'bg-purple-100 text-purple-800 border-purple-300',
                'paused': 'bg-yellow-100 text-yellow-800 border-yellow-300',
                'silent': 'bg-gray-100 text-gray-800 border-gray-300',
                'suspended': 'bg-red-100 text-red-800 border-red-300',
                'withdrawn': 'bg-black text-white border-gray-800'
            };

            // 全クラスをリセット
            select.className = 'status-select px-3 py-1 text-xs font-semibold rounded-full border-2 cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500';

            // 新しいステータスのクラスを追加
            select.className += ' ' + statusColors[status];

            // ステータスラベルのマッピング
            const statusLabels = {
                'active': 'アクティブ',
                'inactive': '非アクティブ',
                'paused': '一時停止',
                'silent': 'サイレント',
                'suspended': '休止',
                'withdrawn': '退会'
            };

            // APIコールでスプレッドシートを更新
            const apiStatus = statusLabels[status];
            updateFranchiseStatusAPI(franchiseId, apiStatus).then(response => {
                console.log(`加盟店 ${franchiseId} のステータスを ${apiStatus} に更新しました`, response);
                showNotification(`ステータスを「${apiStatus}」に更新しました`, 'success');
            }).catch(error => {
                console.error('ステータス更新エラー:', error);
                showNotification('ステータスの更新に失敗しました', 'error');
                // 元のステータスに戻す
                location.reload();
            });

            // 成功メッセージを表示（即座にUI更新）
            const statusLabelsDisplay = {
                'active': 'アクティブ',
                'inactive': '非アクティブ',
                'paused': '一時停止',
                'silent': 'サイレント',
                'suspended': '休止',
                'withdrawn': '退会'
            };

            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            notification.textContent = `ステータスを「${statusLabels[status]}」に更新しました`;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // 加盟店詳細表示
        window.showFranchiseDetail = function(franchiseId) {
            // franchiseDataから該当の加盟店を取得
            const franchiseBase = window.franchiseData ? window.franchiseData.find(f => f.id === franchiseId) : null;
            if (!franchiseBase) {
                alert('加盟店が見つかりません');
                return;
            }

            // 詳細データを構築（実際はAPIから取得）
            const franchise = {
                ...franchiseBase,
                phone: '03-1234-5678',
                performance: {
                    thisMonth: { contracts: 12, rate: 68, avgPrice: '¥266,000', leads: 18 },
                    lastMonth: { contracts: 10, rate: 63, avgPrice: '¥245,000', leads: 16 },
                    threeMonths: { contracts: 31, rate: 65, avgPrice: '¥255,000', leads: 48 }
                },
                activeProjects: 5,
                pendingProjects: 3,
                lastActivity: '2025-01-19 14:30',
                settings: {
                    areas: ['世田谷区', '杉並区', '渋谷区', '目黒区'],
                    services: ['外壁塗装', '屋根塗装', '防水工事', 'シーリング'],
                    handicap: franchiseBase.handicap,
                    status: franchiseBase.status
                }
            };

            // モーダルHTML作成
            const modalHtml = `
                <div id="franchiseDetailModal" class="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm overflow-y-auto h-full w-full z-50" onclick="closeFranchiseDetail(event)">
                    <div class="relative top-10 mx-auto p-5 w-full max-w-5xl" onclick="event.stopPropagation()">
                        <div class="bg-gradient-to-br from-white to-gray-50 rounded-2xl shadow-2xl border border-gray-200 overflow-hidden">
                            <!-- ヘッダー -->
                            <div class="relative bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-5">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h2 class="text-3xl font-bold text-white flex items-center">
                                            ${franchise.name}
                                            <span class="ml-3 px-3 py-1 text-xs font-semibold rounded-full ${
                                                franchise.status === 'active' ? 'bg-green-400 text-green-900' :
                                                franchise.status === 'inactive' ? 'bg-purple-400 text-purple-900' :
                                                'bg-yellow-400 text-yellow-900'
                                            }">
                                                ${franchise.status === 'active' ? 'アクティブ' :
                                                  franchise.status === 'inactive' ? '非アクティブ' :
                                                  franchise.status === 'paused' ? '一時停止中' :
                                                  franchise.status === 'silent' ? 'サイレント' :
                                                  franchise.status === 'suspended' ? '休止' : '退会'}
                                            </span>
                                        </h2>
                                        <p class="text-blue-100 mt-1">
                                            <span class="inline-flex items-center">
                                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                                                </svg>
                                                ${franchise.areaDetail || franchise.area}
                                            </span>
                                            <span class="ml-4">ID: ${franchise.id}</span>
                                        </p>
                                    </div>
                                    <button onclick="closeFranchiseDetail()" class="text-white hover:text-gray-200 transition-colors">
                                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>

                            <div class="p-8 space-y-6 max-h-[70vh] overflow-y-auto">
                                <!-- 📈 パフォーマンスデータ -->
                                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
                                    <h3 class="text-xl font-bold text-gray-800 mb-5 flex items-center">
                                        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-lg flex items-center justify-center mr-3">
                                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                                            </svg>
                                        </div>
                                        パフォーマンスデータ
                                    </h3>

                                    <!-- 期間別データ -->
                                    <div class="grid grid-cols-3 gap-4 mb-4">
                                        <div class="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                                            <div class="flex items-center justify-between mb-2">
                                                <div class="text-sm font-semibold text-gray-600">今月</div>
                                                <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                            <div class="text-2xl font-bold text-gray-800">${franchise.performance.thisMonth.contracts}件</div>
                                            <div class="flex items-center mt-2">
                                                <div class="text-sm font-semibold text-green-600">成約率 ${franchise.performance.thisMonth.rate}%</div>
                                            </div>
                                            <div class="text-xs text-gray-500 mt-1">平均 ${franchise.performance.thisMonth.avgPrice}</div>
                                        </div>
                                        <div class="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                                            <div class="flex items-center justify-between mb-2">
                                                <div class="text-sm font-semibold text-gray-600">先月</div>
                                                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                            <div class="text-2xl font-bold text-gray-800">${franchise.performance.lastMonth.contracts}件</div>
                                            <div class="flex items-center mt-2">
                                                <div class="text-sm font-semibold text-blue-600">成約率 ${franchise.performance.lastMonth.rate}%</div>
                                            </div>
                                            <div class="text-xs text-gray-500 mt-1">平均 ${franchise.performance.lastMonth.avgPrice}</div>
                                        </div>
                                        <div class="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                                            <div class="flex items-center justify-between mb-2">
                                                <div class="text-sm font-semibold text-gray-600">3ヶ月累計</div>
                                                <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                            <div class="text-2xl font-bold text-gray-800">${franchise.performance.threeMonths.contracts}件</div>
                                            <div class="flex items-center mt-2">
                                                <div class="text-sm font-semibold text-purple-600">成約率 ${franchise.performance.threeMonths.rate}%</div>
                                            </div>
                                            <div class="text-xs text-gray-500 mt-1">平均 ${franchise.performance.threeMonths.avgPrice}</div>
                                        </div>
                                    </div>

                                    <!-- 簡易グラフ -->
                                    <div class="bg-white p-4 rounded-lg shadow-sm">
                                        <div class="text-sm font-semibold text-gray-700 mb-3">成約率推移</div>
                                        <div class="flex items-end space-x-3 h-24">
                                            <div class="flex-1 bg-gradient-to-t from-blue-500 to-blue-400 rounded-t-lg shadow-sm" style="height: 63%"></div>
                                            <div class="flex-1 bg-gradient-to-t from-green-500 to-green-400 rounded-t-lg shadow-sm" style="height: 68%"></div>
                                            <div class="flex-1 bg-gradient-to-t from-purple-500 to-purple-400 rounded-t-lg shadow-sm" style="height: 65%"></div>
                                        </div>
                                        <div class="flex justify-between text-xs font-medium text-gray-600 mt-2">
                                            <span>先月</span>
                                            <span>今月</span>
                                            <span>3ヶ月平均</span>
                                        </div>
                                    </div>

                                    <!-- 案件状況 -->
                                    <div class="grid grid-cols-2 gap-4 mt-4">
                                        <div class="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                                            <div class="flex items-center justify-between">
                                                <div>
                                                    <div class="text-sm font-semibold text-gray-600">保有案件数</div>
                                                    <div class="text-3xl font-bold text-blue-600 mt-1">${franchise.activeProjects}</div>
                                                </div>
                                                <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                                                    <svg class="w-7 h-7 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                                            <div class="flex items-center justify-between">
                                                <div>
                                                    <div class="text-sm font-semibold text-gray-600">進行中案件</div>
                                                    <div class="text-3xl font-bold text-orange-600 mt-1">${franchise.pendingProjects}</div>
                                                </div>
                                                <div class="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                                                    <svg class="w-7 h-7 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mt-3 text-sm text-gray-600">
                                        最終活動日: <span class="font-medium">${franchise.lastActivity}</span>
                                    </div>
                                </div>

                                <!-- 📝 簡易メモ -->
                                <div class="bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl p-6 border border-orange-200">
                                    <h3 class="text-xl font-bold text-gray-800 mb-5 flex items-center">
                                        <div class="w-10 h-10 bg-gradient-to-r from-orange-500 to-amber-500 rounded-lg flex items-center justify-center mr-3">
                                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                            </svg>
                                        </div>
                                        簡易メモ
                                    </h3>

                                    <div id="memoList" class="space-y-3 mb-4 max-h-64 overflow-y-auto">
                                        ${franchise.memos && franchise.memos.length > 0 ? franchise.memos.map(memo =>
                                            `<div class="bg-white p-3 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                                                <div class="flex items-center justify-between mb-1">
                                                    <div class="text-xs font-semibold text-orange-600">${memo.date}</div>
                                                    <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                                    </svg>
                                                </div>
                                                <div class="text-sm text-gray-700 leading-relaxed">${memo.content}</div>
                                            </div>`
                                        ).join('') : '<p class="text-gray-500 text-center py-4">まだメモがありません</p>'}
                                    </div>

                                    <button onclick="addMemoInModal('${franchise.id}')" class="w-full py-3 bg-gradient-to-r from-orange-500 to-amber-500 text-white text-sm font-semibold rounded-lg hover:from-orange-600 hover:to-amber-600 transition-all shadow-sm hover:shadow-md">
                                        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                        </svg>
                                        新しいメモを追加
                                    </button>
                                </div>
                            </div>

                            <!-- フッター -->
                            <div class="px-6 py-5 bg-gray-50 border-t border-gray-200 flex justify-between items-center">
                                <button onclick="openFranchisePage('${franchise.id}')" class="group px-6 py-3 bg-gradient-to-r from-yellow-400 to-yellow-500 text-gray-900 font-bold rounded-lg hover:from-yellow-500 hover:to-yellow-600 transform hover:scale-105 transition-all shadow-lg hover:shadow-xl flex items-center space-x-2">
                                    <svg class="w-6 h-6 text-gray-900 group-hover:animate-pulse" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path>
                                    </svg>
                                    <span>Super Access</span>
                                </button>
                                <button onclick="closeFranchiseDetail()" class="px-5 py-2.5 bg-gray-200 text-gray-700 font-medium rounded-lg hover:bg-gray-300 transition-colors">
                                    閉じる
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // モーダルを表示
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        // モーダルのステータス色クラスを取得
        function getModalStatusColorClass(status) {
            const statusColors = {
                'active': 'bg-green-100 text-green-800 border-green-300',
                'inactive': 'bg-purple-100 text-purple-800 border-purple-300',
                'paused': 'bg-yellow-100 text-yellow-800 border-yellow-300',
                'suspended': 'bg-red-100 text-red-800 border-red-300',
                'silent': 'bg-gray-100 text-gray-800 border-gray-300'
            };
            return statusColors[status] || statusColors['active'];
        }

        // モーダルを閉じる
        function closeFranchiseDetail(event) {
            if (!event || event.target.id === 'franchiseDetailModal') {
                const modal = document.getElementById('franchiseDetailModal');
                if (modal) modal.remove();
            }
        }

        // 加盟店画面を開く
        function openFranchisePage(franchiseId) {
            // 実際のアプリケーションでは加盟店専用画面へ遷移
            // ここでは仮のURLパターンで表示
            const franchiseUrl = `/franchise-dashboard/${franchiseId}`;
            console.log(`加盟店画面を開く: ${franchiseUrl}`);

            // 新しいタブで開く場合
            window.open(franchiseUrl, '_blank');

            // 同じタブで遷移する場合は以下を使用
            // window.location.href = franchiseUrl;
        }

        // モーダル内でメモを追加
        function addMemoInModal(franchiseId) {
            const memoContent = prompt('メモを入力してください：');
            if (memoContent) {
                const franchise = window.franchiseData ? window.franchiseData.find(f => f.id === franchiseId) : null;
                if (franchise) {
                    const today = new Date().toISOString().split('T')[0];
                    if (!franchise.memos) franchise.memos = [];
                    franchise.memos.unshift({ date: today, content: memoContent });
                    console.log(`加盟店 ${franchiseId} にメモを追加: ${memoContent}`);
                    alert('メモを追加しました');
                    updateModalMemos(franchiseId);
                }
            }
        }

        // モーダル内のメモリストを更新
        function updateModalMemos(franchiseId) {
            const franchise = window.franchiseData ? window.franchiseData.find(f => f.id === franchiseId) : null;
            if (!franchise) return;

            const memoList = document.getElementById('memoList');
            if (memoList) {
                memoList.innerHTML = franchise.memos && franchise.memos.length > 0 ? franchise.memos.map(memo => `
                    <div class="bg-white p-3 rounded border border-gray-200">
                        <div class="text-xs text-gray-500 mb-1">${memo.date}</div>
                        <div class="text-sm text-gray-700">${memo.content}</div>
                    </div>
                `).join('') : '<p class="text-gray-500">まだメモがありません</p>';
            }
        }

        // 加盟店に電話
        function callFranchise(franchiseId) {
            console.log(`加盟店 ${franchiseId} に電話`);
            // 実際のアプリケーションでは電話番号を取得してダイヤル
            alert(`加盟店 ${franchiseId} に電話をかけます`);
        }

        // 加盟店にメール
        function emailFranchise(franchiseId) {
            console.log(`加盟店 ${franchiseId} にメール`);
            // 実際のアプリケーションではメールアドレスを取得してメールクライアントを起動
            alert(`加盟店 ${franchiseId} にメールを送信します`);
        }

        // 加盟店に通知
        function snsFranchise(franchiseId) {
            console.log(`加盟店 ${franchiseId} に通知`);
            // 実際のアプリケーションでは通知システムと連携
            alert(`加盟店 ${franchiseId} に通知を送信します`);
        }

        // 加盟店にメモを追加
        function addMemo(franchiseId) {
            const memoContent = prompt('メモを入力してください：');
            if (memoContent) {
                const franchise = window.franchiseData ? window.franchiseData.find(f => f.id === franchiseId) : null;
                if (franchise) {
                    const today = new Date().toISOString().split('T')[0];
                    if (!franchise.memos) franchise.memos = [];
                    franchise.memos.unshift({ date: today, content: memoContent });
                    console.log(`加盟店 ${franchiseId} にメモを追加: ${memoContent}`);
                    alert('メモを追加しました');
                    // モーダルが開いていれば更新
                    if (document.getElementById('franchiseDetailModal')) {
                        updateModalMemos(franchiseId);
                    }
                }
            }
        }

        // メニューのアクティブ状態を更新
        function updateActiveMenu(activeSection) {
            // すべてのメニューアイテムのアクティブクラスを削除
            const menuItems = document.querySelectorAll('#sideMenu a');
            menuItems.forEach(item => {
                item.classList.remove('bg-gradient-to-r', 'from-blue-600', 'to-blue-500', 'text-gray-100');
                item.classList.add('hover:bg-gray-800', 'text-gray-400', 'hover:text-gray-100');
            });

            // 現在のセクションのメニューをアクティブにする
            let selector = '';
            switch(activeSection) {
                case 'dashboard':
                    selector = 'a[href="#dashboard"]';
                    break;
                case 'assignment':
                    selector = 'a[href="#assignment"]';
                    break;
                case 'franchise':
                    selector = 'a[href="#franchise"]';
                    break;
                case 'registrationRequests':
                    selector = 'a[href="#registration-requests"]';
                    break;
                case 'cancelRequests':
                    selector = 'a[href="#cancel-requests"]';
                    break;
                case 'financial':
                    selector = 'a[href="#financial"]';
                    break;
                case 'ranking':
                    selector = 'a[href="#ranking"]';
                    break;
            }

            if (selector) {
                const activeItem = document.querySelector('#sideMenu ' + selector);
                if (activeItem) {
                    activeItem.classList.remove('hover:bg-gray-800', 'text-gray-400', 'hover:text-gray-100');
                    activeItem.classList.add('bg-gradient-to-r', 'from-blue-600', 'to-blue-500', 'text-gray-100');
                }
            }
        }

        // ソート機能
        function sortFranchises(sortType) {
            const button = event.target.closest('button');
            const currentOrder = button.getAttribute('data-order');
            const newOrder = currentOrder === 'desc' ? 'asc' : 'desc';

            // ボタンのアクティブ状態を更新
            document.querySelectorAll('.sort-btn').forEach(btn => {
                btn.classList.remove('bg-blue-600', 'text-white', 'border-blue-600');
                btn.classList.add('border-gray-300');
                // アイコンをリセット
                const icon = btn.querySelector('.sort-icon');
                if (icon) icon.textContent = '↓';
            });

            button.classList.remove('border-gray-300');
            button.classList.add('bg-blue-600', 'text-white', 'border-blue-600');

            // ソート方向を更新
            button.setAttribute('data-order', newOrder);
            const icon = button.querySelector('.sort-icon');
            if (icon) icon.textContent = newOrder === 'desc' ? '↓' : '↑';

            // ソート処理のメッセージ
            const sortLabels = {
                'sales': '売上',
                'conversion': '成約率',
                'activity': '最終活動',
                'cospa': 'コスパ',
                'cases': '案件数',
                'newest': '新着'
            };

            const orderLabel = newOrder === 'desc' ? '降順' : '昇順';
            console.log(`${sortLabels[sortType]}を${orderLabel}でソートしました`);

            // 実際のソート処理はここで実装
            // APIコールまたはクライアント側のソートロジック
        }

        // セクション切り替え機能
        function showSection(sectionName) {
            // メニューを閉じる
            document.getElementById('sideMenu').classList.add('-translate-x-full');

            // 初期案件管理コンテンツを保存（初回のみ）
            if (!window.originalAssignmentContent && sectionName !== 'assignment') {
                window.originalAssignmentContent = document.querySelector('main').innerHTML;
            }

            // URLハッシュを更新
            window.location.hash = '#' + sectionName;

            // メニューのアクティブ状態を更新
            updateActiveMenu(sectionName);

            const mainContent = document.querySelector('main');

            // セクションに応じたコンテンツを表示
            if (sectionName === 'assignment') {
                // 案件管理を表示（保存されていれば復元、なければ現在の内容を保持）
                if (window.originalAssignmentContent) {
                    mainContent.innerHTML = window.originalAssignmentContent;
                }
                // 案件管理の初期化処理が必要であれば実行
                if (typeof initializeAssignment === 'function') {
                    initializeAssignment();
                }
            } else if (sectionName === 'dashboard') {
                // 現在のコンテンツを非表示
                const mainContent = document.querySelector('main');
                window.location.href = '#dashboard';
                mainContent.innerHTML = `
                    <div class="pt-20 px-6 max-w-7xl mx-auto">
                        <div class="mb-8">
                            <h1 class="text-4xl font-bold text-gray-800 mb-2">ダッシュボード</h1>
                            <p class="text-gray-600">リアルタイムモニター</p>
                        </div>
                        
                        <!-- KPIカード -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                            <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg transition-shadow">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-500">未振分案件</span>
                                    <span class="text-xs bg-red-100 text-red-600 px-2 py-1 rounded-full animate-pulse">要対応</span>
                                </div>
                                <div class="mt-4 text-3xl font-bold text-gray-800">7</div>
                                <div class="mt-2 text-xs text-gray-500">直近1時間: +3</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg transition-shadow">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-500">本日振分済</span>
                                    <span class="text-xs text-green-600">+12%</span>
                                </div>
                                <div class="mt-4 text-3xl font-bold text-gray-800">24</div>
                                <div class="mt-2 text-xs text-gray-500">目標: 30件</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg transition-shadow">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-500">進行中案件</span>
                                    <span class="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded-full">活発</span>
                                </div>
                                <div class="mt-4 text-3xl font-bold text-gray-800">42</div>
                                <div class="mt-2 text-xs text-gray-500">見積提出待ち: 18</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200 hover:shadow-lg transition-shadow">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-500">今月成約</span>
                                    <span class="text-xs text-purple-600">目標85%</span>
                                </div>
                                <div class="mt-4 text-3xl font-bold text-gray-800">¥8.5M</div>
                                <div class="mt-2 text-xs text-gray-500">紹介料: ¥1.28M</div>
                            </div>
                        </div>
                        
                        <!-- グラフエリア -->
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">案件ステータス分布</h3>
                                <div class="space-y-3">
                                    <div class="flex items-center">
                                        <span class="text-sm text-gray-600 w-24">未振分</span>
                                        <div class="flex-1 bg-gray-200 rounded-full h-6 relative">
                                            <div class="bg-red-500 h-6 rounded-full" style="width: 15%"></div>
                                        </div>
                                        <span class="text-sm text-gray-800 ml-3 font-semibold">7件</span>
                                    </div>
                                    <div class="flex items-center">
                                        <span class="text-sm text-gray-600 w-24">振分済</span>
                                        <div class="flex-1 bg-gray-200 rounded-full h-6 relative">
                                            <div class="bg-yellow-500 h-6 rounded-full" style="width: 25%"></div>
                                        </div>
                                        <span class="text-sm text-gray-800 ml-3 font-semibold">12件</span>
                                    </div>
                                    <div class="flex items-center">
                                        <span class="text-sm text-gray-600 w-24">進行中</span>
                                        <div class="flex-1 bg-gray-200 rounded-full h-6 relative">
                                            <div class="bg-blue-500 h-6 rounded-full" style="width: 45%"></div>
                                        </div>
                                        <span class="text-sm text-gray-800 ml-3 font-semibold">42件</span>
                                    </div>
                                    <div class="flex items-center">
                                        <span class="text-sm text-gray-600 w-24">完了</span>
                                        <div class="flex-1 bg-gray-200 rounded-full h-6 relative">
                                            <div class="bg-green-500 h-6 rounded-full" style="width: 35%"></div>
                                        </div>
                                        <span class="text-sm text-gray-800 ml-3 font-semibold">28件</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">加盟店パフォーマンス TOP5</h3>
                                <div class="space-y-3">
                                    <div class="flex items-center justify-between p-2 hover:bg-gray-50 rounded">
                                        <div class="flex items-center">
                                            <span class="text-lg font-bold text-yellow-500 w-8">1</span>
                                            <span class="text-sm text-gray-800">田中塗装工業</span>
                                        </div>
                                        <div class="text-right">
                                            <div class="text-sm font-semibold text-gray-800">成約率 68%</div>
                                            <div class="text-xs text-gray-500">今月 12件</div>
                                        </div>
                                    </div>
                                    <div class="flex items-center justify-between p-2 hover:bg-gray-50 rounded">
                                        <div class="flex items-center">
                                            <span class="text-lg font-bold text-gray-400 w-8">2</span>
                                            <span class="text-sm text-gray-800">山田ペイント</span>
                                        </div>
                                        <div class="text-right">
                                            <div class="text-sm font-semibold text-gray-800">成約率 62%</div>
                                            <div class="text-xs text-gray-500">今月 10件</div>
                                        </div>
                                    </div>
                                    <div class="flex items-center justify-between p-2 hover:bg-gray-50 rounded">
                                        <div class="flex items-center">
                                            <span class="text-lg font-bold text-orange-600 w-8">3</span>
                                            <span class="text-sm text-gray-800">佐藤塗装店</span>
                                        </div>
                                        <div class="text-right">
                                            <div class="text-sm font-semibold text-gray-800">成約率 58%</div>
                                            <div class="text-xs text-gray-500">今月 9件</div>
                                        </div>
                                    </div>
                                    <div class="flex items-center justify-between p-2 hover:bg-gray-50 rounded">
                                        <div class="flex items-center">
                                            <span class="text-lg font-bold text-gray-400 w-8">4</span>
                                            <span class="text-sm text-gray-800">鈴木建装</span>
                                        </div>
                                        <div class="text-right">
                                            <div class="text-sm font-semibold text-gray-800">成約率 55%</div>
                                            <div class="text-xs text-gray-500">今月 8件</div>
                                        </div>
                                    </div>
                                    <div class="flex items-center justify-between p-2 hover:bg-gray-50 rounded">
                                        <div class="flex items-center">
                                            <span class="text-lg font-bold text-gray-400 w-8">5</span>
                                            <span class="text-sm text-gray-800">高橋塗装</span>
                                        </div>
                                        <div class="text-right">
                                            <div class="text-sm font-semibold text-gray-800">成約率 52%</div>
                                            <div class="text-xs text-gray-500">今月 7件</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- アラートエリア -->
                        <div class="bg-white rounded-xl p-6 border border-gray-200">
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">要対応アラート</h3>
                            <div class="space-y-3">
                                <div class="flex items-center justify-between p-3 bg-red-50 border-l-4 border-red-500 rounded">
                                    <div>
                                        <div class="text-sm font-semibold text-red-800">案件ID: #2024-0892</div>
                                        <div class="text-xs text-red-600">30分以上未振分 - 千葉県船橋市の戸建て案件</div>
                                    </div>
                                    <button onclick="showSection('assignment')" class="px-3 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600">対応する</button>
                                </div>
                                <div class="flex items-center justify-between p-3 bg-purple-50 border-l-4 border-purple-500 rounded animate-pulse">
                                    <div>
                                        <div class="text-sm font-semibold text-purple-800">🚨 キャンセル申請</div>
                                        <div class="text-xs text-purple-600">田中塗装工業より - 案件ID: #2024-0885「対応不可のため辞退」</div>
                                    </div>
                                    <button onclick="showCancelRequest('#2024-0885')" class="px-3 py-1 bg-purple-500 text-white text-xs rounded hover:bg-purple-600">処理する</button>
                                </div>
                                <div class="flex items-center justify-between p-3 bg-yellow-50 border-l-4 border-yellow-500 rounded">
                                    <div>
                                        <div class="text-sm font-semibold text-yellow-800">加盟店: 山田ペイント</div>
                                        <div class="text-xs text-yellow-600">見積提出期限まで残り2時間</div>
                                    </div>
                                    <button class="px-3 py-1 bg-yellow-500 text-white text-xs rounded hover:bg-yellow-600">確認</button>
                                </div>
                                <div class="flex items-center justify-between p-3 bg-blue-50 border-l-4 border-blue-500 rounded">
                                    <div>
                                        <div class="text-sm font-semibold text-blue-800">請求処理</div>
                                        <div class="text-xs text-blue-600">3件の成約案件の紹介料計算が未完了</div>
                                    </div>
                                    <button onclick="showSection('financial')" class="px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600">処理する</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } else if (sectionName === 'franchise') {
                // 加盟店管理セクション
                const mainContent = document.querySelector('main');

                // 先に画面をクリアして加盟店管理の基本構造を表示
                mainContent.innerHTML = ''; // 一旦クリア

                // 後でスプレッドシートから実データを取得
                (window.loadFranchiseManagementData || loadFranchiseManagementData)('all').then(response => {
                    console.log('加盟店データ取得成功:', response);

                    // データを画面用に変換
                    window.franchiseData = response.data.map(f => ({
                        id: f.id,
                        name: f.companyName,
                        avatar: {
                            text: f.companyName ? f.companyName.substring(0, 1) : '？',
                            colorClass: 'bg-blue-100',
                            textColorClass: 'text-blue-600'
                        },
                        area: f.area,
                        areaDetail: f.area,
                        conversionRate: f.contractRate || 0,
                        conversionChange: f.performance ? `${f.performance.trend}${f.performance.trendValue}%` : '+0%',
                        conversionColorClass: f.performance && f.performance.trend === '+' ? 'text-green-600' : 'text-yellow-600',
                        monthlyPerformance: {
                            cases: f.deliveryCount ? f.deliveryCount.current : 0,
                            amount: f.deliveryCount ? f.deliveryCount.unit : '¥0M'
                        },
                        handicap: f.handicap || 0,
                        status: convertStatusForUI(f.status),
                        memos: []
                    }));

                    // テーブルを更新（PC版）
                    const tbody = document.querySelector('#franchise-table tbody');
                    if (tbody) {
                        tbody.innerHTML = generateFranchiseRows(window.franchiseData);
                    }

                    // モバイル版を更新
                    const mobileContainer = document.querySelector('#franchise-mobile-container');
                    if (mobileContainer) {
                        mobileContainer.innerHTML = generateFranchiseMobileCards(window.franchiseData);
                    }

                    // 統計を更新
                    updateFranchiseStats(response.stats);
                }).catch(error => {
                    console.error('加盟店データ取得エラー:', error);
                    showNotification('加盟店データの取得に失敗しました', 'error');
                });

                // ステータス変換関数
                function convertStatusForUI(status) {
                    const statusMap = {
                        'アクティブ': 'active',
                        '非アクティブ': 'inactive',
                        '一時停止': 'paused',
                        'サイレント': 'silent',
                        '休止': 'suspended',
                        '退会': 'withdrawn'
                    };
                    return statusMap[status] || 'active';
                }

                // 統計情報を更新する関数
                function updateFranchiseStats(stats) {
                    const statsHTML = `
                        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
                            <div class="bg-green-50 rounded-lg p-4">
                                <div class="text-2xl font-bold text-green-600">${stats.active || 0}</div>
                                <div class="text-xs text-gray-600">アクティブ</div>
                            </div>
                            <div class="bg-yellow-50 rounded-lg p-4">
                                <div class="text-2xl font-bold text-yellow-600">${stats.paused || 0}</div>
                                <div class="text-xs text-gray-600">一時停止</div>
                            </div>
                            <div class="bg-purple-50 rounded-lg p-4">
                                <div class="text-2xl font-bold text-purple-600">${stats.silent || 0}</div>
                                <div class="text-xs text-gray-600">サイレント</div>
                            </div>
                            <div class="bg-gray-50 rounded-lg p-4">
                                <div class="text-2xl font-bold text-gray-600">${stats.inactive || 0}</div>
                                <div class="text-xs text-gray-600">非アクティブ</div>
                            </div>
                            <div class="bg-red-50 rounded-lg p-4">
                                <div class="text-2xl font-bold text-red-600">${stats.suspended || 0}</div>
                                <div class="text-xs text-gray-600">休止</div>
                            </div>
                            <div class="bg-black rounded-lg p-4">
                                <div class="text-2xl font-bold text-white">${stats.withdrawn || 0}</div>
                                <div class="text-xs text-gray-300">退会</div>
                            </div>
                        </div>
                    `;

                    // 統計セクションを挿入
                    const searchArea = document.querySelector('.bg-white.rounded-xl.p-4.mb-6');
                    if (searchArea) {
                        searchArea.insertAdjacentHTML('beforebegin', statsHTML);
                    }
                }

                // 初期モックデータ（データ取得中の表示用）
                window.franchiseData = [
                    {
                        id: 'F001',
                        name: '田中塗装工業',
                        avatar: { text: '田', colorClass: 'bg-blue-100', textColorClass: 'text-blue-600' },
                        area: '東京都',
                        areaDetail: '東京都世田谷区北沢2-15-8',
                        conversionRate: 68,
                        conversionChange: '+5%',
                        conversionColorClass: 'text-green-600',
                        monthlyPerformance: { cases: 12, amount: '¥3.2M' },
                        handicap: 1,
                        status: 'active',
                        memos: []
                    },
                    {
                        id: 'F002',
                        name: '山田ペイント',
                        avatar: { text: '山', colorClass: 'bg-purple-100', textColorClass: 'text-purple-600' },
                        area: '神奈川県',
                        areaDetail: '神奈川県横浜市中区本町3-24-1',
                        conversionRate: 62,
                        conversionChange: '+2%',
                        conversionColorClass: 'text-green-600',
                        monthlyPerformance: { cases: 10, amount: '¥2.8M' },
                        handicap: 0,
                        status: 'active',
                        memos: []
                    },
                    {
                        id: 'F003',
                        name: '佐藤塗装店',
                        avatar: { text: '佐', colorClass: 'bg-orange-100', textColorClass: 'text-orange-600' },
                        area: '千葉県',
                        areaDetail: '千葉県船橋市本町7-11-5',
                        conversionRate: 58,
                        conversionChange: '-3%',
                        conversionColorClass: 'text-yellow-600',
                        monthlyPerformance: { cases: 9, amount: '¥2.1M' },
                        handicap: -1,
                        status: 'active',
                        memos: []
                    }
                ];

                // 先に加盟店管理画面のHTMLを設定
                mainContent.innerHTML = `
                    <div class="pt-20 px-3 md:px-6 max-w-7xl mx-auto">
                        <div class="mb-6">
                            <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-2">加盟店管理</h1>
                            <p class="text-sm md:text-base text-gray-600">加盟店の情報管理・パフォーマンス分析</p>
                        </div>

                        <div id="franchise-stats-container"></div>

                        <!-- 検索・フィルタエリア -->
                        <div class="bg-white rounded-xl p-3 md:p-4 mb-4 border border-gray-200">
                            <div class="flex flex-wrap gap-2 md:gap-4">
                                <input type="search" id="franchiseSearchInput" placeholder="加盟店名で検索..." oninput="searchFranchises()" autocomplete="off" class="flex-1 min-w-[150px] px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation">
                                <select id="franchiseStatusFilter" onchange="filterFranchisesByStatus()" class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm">
                                    <option value="all">全ステータス</option>
                                    <option value="active">アクティブ</option>
                                    <option value="inactive">非アクティブ</option>
                                    <option value="paused">一時停止</option>
                                    <option value="silent">サイレント</option>
                                    <option value="suspended">休止</option>
                                    <option value="withdrawn">退会</option>
                                </select>
                            </div>
                        </div>

                        <!-- ソート機能 -->
                        <div class="bg-white rounded-xl p-3 md:p-4 mb-4 border border-gray-200">
                            <div class="flex items-center gap-2 overflow-x-auto">
                                <span class="text-xs md:text-sm font-medium text-gray-700 whitespace-nowrap">並び替え：</span>
                                <div class="flex gap-2">
                                    <button onclick="sortFranchises('sales')" class="px-3 py-1.5 text-xs md:text-sm bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow hover:shadow-md transition-all whitespace-nowrap">
                                        売上順
                                    </button>
                                    <button onclick="sortFranchises('conversion')" class="px-3 py-1.5 text-xs md:text-sm bg-gradient-to-r from-emerald-500 to-emerald-600 text-white rounded-lg shadow hover:shadow-md transition-all whitespace-nowrap">
                                        成約率順
                                    </button>
                                    <button onclick="sortFranchises('activity')" class="px-3 py-1.5 text-xs md:text-sm bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-lg shadow hover:shadow-md transition-all whitespace-nowrap">
                                        最終活動順
                                    </button>
                                    <button onclick="sortFranchises('cospa')" class="px-3 py-1.5 text-xs md:text-sm bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg shadow hover:shadow-md transition-all whitespace-nowrap">
                                        コスパ順
                                    </button>
                                    <button onclick="sortFranchises('cases')" class="px-3 py-1.5 text-xs md:text-sm bg-gradient-to-r from-pink-500 to-pink-600 text-white rounded-lg shadow hover:shadow-md transition-all whitespace-nowrap">
                                        案件数順
                                    </button>
                                    <button onclick="sortFranchises('newest')" class="px-3 py-1.5 text-xs md:text-sm bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg shadow hover:shadow-md transition-all whitespace-nowrap">
                                        新着順
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- 加盟店リスト -->
                        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
                            <!-- PC版テーブル表示 -->
                            <div class="overflow-x-auto hidden md:block">
                                <table class="w-full min-w-[900px]" id="franchise-table">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">加盟店名</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">エリア</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">成約率</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">今月実績</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ハンデ</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ステータス</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">アクション</th>
                                        </tr>
                                    </thead>
                                    <tbody class="divide-y divide-gray-200" id="franchiseTableBody">
                                        <tr><td colspan="7" class="text-center py-4 text-gray-500">データを読み込み中...</td></tr>
                                    </tbody>
                                </table>
                            </div>

                            <!-- スマホ版カード表示 -->
                            <div class="md:hidden" id="franchise-mobile-container">
                                <div class="p-4 text-center text-gray-500">データを読み込み中...</div>
                            </div>
                        </div>
                    </div>
                `;

                // テーブル行を生成する関数
                function generateFranchiseRows(franchises) {
                    return franchises.map(franchise => `
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4">
                                <div>
                                    <div class="text-sm font-medium text-gray-900">${franchise.name}</div>
                                    <div class="text-xs text-gray-500">ID: ${franchise.id}</div>
                                </div>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-900" title="${franchise.areaDetail}">${franchise.area}</td>
                            <td class="px-6 py-4">
                                <div class="text-sm font-semibold ${franchise.conversionColorClass}">${franchise.conversionRate}%</div>
                                <div class="text-xs text-gray-500">前月比 ${franchise.conversionChange}</div>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-900">${franchise.monthlyPerformance.cases}件 / ${franchise.monthlyPerformance.amount}</div>
                            </td>
                            <td class="px-6 py-4">
                                <select class="px-2 py-1 text-xs font-semibold rounded border border-gray-300 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500" onchange="updateHandicap('${franchise.id}', this.value)">
                                    ${[3, 2, 1, 0, -1, -2, -3].map(val =>
                                        `<option value="${val > 0 ? '+' : ''}${val}" ${franchise.handicap === val ? 'selected' : ''}>${val > 0 ? '+' : ''}${val}</option>`
                                    ).join('')}
                                </select>
                            </td>
                            <td class="px-6 py-4">
                                <select class="status-select px-3 py-1 text-xs font-semibold rounded-full border-2 cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 ${getStatusColorClass(franchise.status)}" onchange="updateFranchiseStatus('${franchise.id}', this.value)" data-franchise-id="${franchise.id}">
                                    <option value="active" ${franchise.status === 'active' ? 'selected' : ''}>アクティブ</option>
                                    <option value="inactive" ${franchise.status === 'inactive' ? 'selected' : ''}>非アクティブ</option>
                                    <option value="paused" ${franchise.status === 'paused' ? 'selected' : ''}>一時停止中</option>
                                    <option value="silent" ${franchise.status === 'silent' ? 'selected' : ''}>サイレント</option>
                                    <option value="suspended" ${franchise.status === 'suspended' ? 'selected' : ''}>休止</option>
                                    <option value="withdrawn" ${franchise.status === 'withdrawn' ? 'selected' : ''}>退会</option>
                                </select>
                            </td>
                            <td class="px-6 py-4">
                                <button class="text-gray-600 hover:text-gray-800 text-lg mr-2" onclick="callFranchise('${franchise.id}')" title="電話">📞</button>
                                <button class="text-gray-600 hover:text-gray-800 text-lg mr-2" onclick="emailFranchise('${franchise.id}')" title="メール">📤</button>
                                <button class="text-gray-600 hover:text-gray-800 text-lg mr-3" onclick="snsFranchise('${franchise.id}')" title="通知">🔔</button>
                                <button class="text-blue-600 hover:text-blue-800 text-sm font-medium" onclick="showFranchiseDetail('${franchise.id}')">詳細</button>
                            </td>
                        </tr>
                    `).join('');
                }

                // スマホ版カード表示を生成する関数
                function generateFranchiseMobileCards(franchises) {
                    return franchises.map(franchise => `
                        <div class="p-4 border-b border-gray-200">
                            <div class="mb-3">
                                <div class="font-semibold text-gray-900">${franchise.name}</div>
                                <div class="text-xs text-gray-500">ID: ${franchise.id}</div>
                            </div>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">エリア:</span>
                                    <span class="font-medium">${franchise.area}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">成約率:</span>
                                    <span class="font-semibold ${franchise.conversionColorClass}">${franchise.conversionRate}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">今月実績:</span>
                                    <span>${franchise.monthlyPerformance.cases}件</span>
                                </div>
                                <div class="flex justify-between items-center">
                                    <span class="text-gray-600">ステータス:</span>
                                    <select class="status-select px-2 py-1 text-xs font-semibold rounded-full border-2 ${getStatusColorClass(franchise.status)}"
                                            onchange="updateFranchiseStatus('${franchise.id}', this.value)"
                                            data-franchise-id="${franchise.id}">
                                        <option value="active" ${franchise.status === 'active' ? 'selected' : ''}>アクティブ</option>
                                        <option value="inactive" ${franchise.status === 'inactive' ? 'selected' : ''}>非アクティブ</option>
                                        <option value="paused" ${franchise.status === 'paused' ? 'selected' : ''}>一時停止</option>
                                        <option value="silent" ${franchise.status === 'silent' ? 'selected' : ''}>サイレント</option>
                                        <option value="suspended" ${franchise.status === 'suspended' ? 'selected' : ''}>休止</option>
                                        <option value="withdrawn" ${franchise.status === 'withdrawn' ? 'selected' : ''}>退会</option>
                                    </select>
                                </div>
                                <div class="flex justify-between items-center pt-2 border-t">
                                    <div class="flex gap-2">
                                        <button onclick="callFranchise('${franchise.id}')" class="text-gray-600 text-lg">📞</button>
                                        <button onclick="emailFranchise('${franchise.id}')" class="text-gray-600 text-lg">📤</button>
                                        <button onclick="snsFranchise('${franchise.id}')" class="text-gray-600 text-lg">🔔</button>
                                    </div>
                                    <button onclick="showFranchiseDetail('${franchise.id}')" class="text-blue-600 text-sm font-medium">詳細</button>
                                </div>
                            </div>
                        </div>
                    `).join('');
                }

                // ステータスに応じた色クラスを返す関数
                function getStatusColorClass(status) {
                    const statusColors = {
                        'active': 'bg-green-100 text-green-800 border-green-300',
                        'inactive': 'bg-purple-100 text-purple-800 border-purple-300',
                        'paused': 'bg-yellow-100 text-yellow-800 border-yellow-300',
                        'silent': 'bg-gray-100 text-gray-800 border-gray-300',
                        'suspended': 'bg-red-100 text-red-800 border-red-300',
                        'withdrawn': 'bg-black text-white border-gray-800'
                    };
                    return statusColors[status] || statusColors['active'];
                }

            } else if (sectionName === 'financial') {
                // 請求・財務セクション
                const mainContent = document.querySelector('main');
                window.location.href = '#financial';
                mainContent.innerHTML = `
                    <div class="pt-20 px-6 max-w-7xl mx-auto">
                        <div class="mb-8">
                            <h1 class="text-3xl font-bold text-gray-800 mb-2">請求・財務管理</h1>
                            <p class="text-gray-600">紹介料計算・請求書管理・財務レポート</p>
                        </div>
                        
                        <!-- 概要カード -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">今月請求額</div>
                                <div class="text-2xl font-bold text-gray-800">¥1,280,000</div>
                                <div class="text-xs text-green-600 mt-1">前月比 +15%</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">未処理請求</div>
                                <div class="text-2xl font-bold text-yellow-600">3件</div>
                                <div class="text-xs text-gray-500 mt-1">合計 ¥320,000</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">入金待ち</div>
                                <div class="text-2xl font-bold text-blue-600">5件</div>
                                <div class="text-xs text-gray-500 mt-1">合計 ¥850,000</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">今月入金済</div>
                                <div class="text-2xl font-bold text-green-600">¥2,150,000</div>
                                <div class="text-xs text-gray-500 mt-1">12件完了</div>
                            </div>
                        </div>
                        
                        <!-- タブナビゲーション -->
                        <div class="bg-white rounded-t-xl border border-gray-200 border-b-0">
                            <div class="flex border-b" id="financialTabs">
                                <button onclick="switchFinancialTab('referral')" class="px-6 py-3 text-sm font-medium text-blue-600 border-b-2 border-blue-600 tab-btn" data-tab="referral">紹介料請求</button>
                                <button onclick="switchFinancialTab('success')" class="px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-800 tab-btn" data-tab="success">成約手数料</button>
                                <button onclick="switchFinancialTab('invoices')" class="px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-800 tab-btn" data-tab="invoices">請求書一覧</button>
                                <button onclick="switchFinancialTab('payment')" class="px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-800 tab-btn" data-tab="payment">支払予定</button>
                            </div>
                        </div>
                        
                        <!-- 紹介料タブ -->
                        <div id="referralTab" class="financial-tab-content">
                            <div class="bg-white rounded-b-xl border border-gray-200 border-t-0">
                                <div class="p-6">
                                    <div class="grid grid-cols-4 gap-4 mb-6">
                                        <div class="bg-blue-50 p-4 rounded-lg">
                                            <div class="text-sm text-gray-600">今月請求予定</div>
                                            <div class="text-2xl font-bold text-blue-600">¥385,000</div>
                                            <div class="text-xs text-gray-500">税込（35件）</div>
                                        </div>
                                        <div class="bg-green-50 p-4 rounded-lg">
                                            <div class="text-sm text-gray-600">入金済み</div>
                                            <div class="text-2xl font-bold text-green-600">¥2,750,000</div>
                                            <div class="text-xs text-gray-500">今月分</div>
                                        </div>
                                        <div class="bg-yellow-50 p-4 rounded-lg">
                                            <div class="text-sm text-gray-600">未入金</div>
                                            <div class="text-2xl font-bold text-yellow-600">¥110,000</div>
                                            <div class="text-xs text-gray-500">遅延1件</div>
                                        </div>
                                        <div class="bg-purple-50 p-4 rounded-lg">
                                            <div class="text-sm text-gray-600">今月紹介数</div>
                                            <div class="text-2xl font-bold text-purple-600">42件</div>
                                            <div class="text-xs text-gray-500">前月比 +8</div>
                                        </div>
                                    </div>
                                    <div class="mb-4 flex justify-between items-center">
                                        <div class="flex gap-2">
                                            <button class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                                                <i class="fas fa-file-invoice mr-2"></i>請求書一括発行
                                            </button>
                                            <button class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                                                <i class="fas fa-download mr-2"></i>CSVエクスポート
                                            </button>
                                        </div>
                                        <div class="flex gap-2">
                                            <select class="px-3 py-2 border rounded-lg">
                                                <option>全期間</option>
                                                <option>今月</option>
                                                <option>先月</option>
                                                <option>過去3ヶ月</option>
                                            </select>
                                            <select class="px-3 py-2 border rounded-lg">
                                                <option>全ステータス</option>
                                                <option>未請求</option>
                                                <option>請求済み</option>
                                                <option>入金済み</option>
                                                <option>遅延</option>
                                            </select>
                                        </div>
                                    </div>
                                    <table class="w-full">
                                        <thead>
                                            <tr class="border-b bg-gray-50">
                                                <th class="text-left py-3 px-4">
                                                    <input type="checkbox" class="rounded">
                                                </th>
                                                <th class="text-left py-3 px-4">加盟店名</th>
                                                <th class="text-left py-3 px-4">案件ID</th>
                                                <th class="text-left py-3 px-4">顧客名</th>
                                                <th class="text-left py-3 px-4">建物種別</th>
                                                <th class="text-right py-3 px-4">紹介料<br><span class="text-xs text-gray-500">(税抜)</span></th>
                                                <th class="text-right py-3 px-4">消費税<br><span class="text-xs text-gray-500">(10%)</span></th>
                                                <th class="text-right py-3 px-4">請求額<br><span class="text-xs text-gray-500">(税込)</span></th>
                                                <th class="text-left py-3 px-4">支払日</th>
                                                <th class="text-center py-3 px-4">ステータス</th>
                                                <th class="text-center py-3 px-4">操作</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr class="border-b hover:bg-gray-50">
                                                <td class="py-3 px-4">
                                                    <input type="checkbox" class="rounded">
                                                </td>
                                                <td class="py-3 px-4 font-medium">田中ホームテック</td>
                                                <td class="py-3 px-4">C-2025-0142</td>
                                                <td class="py-3 px-4">山田太郎</td>
                                                <td class="py-3 px-4"><span class="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs">戸建て</span></td>
                                                <td class="text-right py-3 px-4 font-semibold">¥20,000</td>
                                                <td class="text-right py-3 px-4 text-gray-600">¥2,000</td>
                                                <td class="text-right py-3 px-4 font-bold text-blue-600">¥22,000</td>
                                                <td class="py-3 px-4">2025/02/15</td>
                                                <td class="text-center py-3 px-4">
                                                    <span class="px-2 py-1 bg-yellow-100 text-yellow-700 rounded text-xs">未請求</span>
                                                </td>
                                                <td class="text-center py-3 px-4">
                                                    <button class="text-blue-600 hover:text-blue-800 text-sm">請求書作成</button>
                                                </td>
                                    </tr>
                                    <tr class="border-b hover:bg-gray-50">
                                        <td class="py-3 px-4">
                                            <input type="checkbox" class="rounded">
                                        </td>
                                        <td class="py-3 px-4 font-medium">山田ペイント</td>
                                        <td class="py-3 px-4">C-2025-0847</td>
                                        <td class="py-3 px-4">鈴木花子</td>
                                        <td class="py-3 px-4"><span class="px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs">マンション</span></td>
                                        <td class="text-right py-3 px-4 font-semibold">¥30,000</td>
                                        <td class="text-right py-3 px-4 text-gray-600">¥3,000</td>
                                        <td class="text-right py-3 px-4 font-bold text-blue-600">¥33,000</td>
                                        <td class="py-3 px-4">2025/02/15</td>
                                        <td class="text-center py-3 px-4">
                                            <span class="px-2 py-1 bg-yellow-100 text-yellow-700 rounded text-xs">未請求</span>
                                        </td>
                                        <td class="text-center py-3 px-4">
                                            <button class="text-blue-600 hover:text-blue-800 text-sm">請求書作成</button>
                                        </td>
                                    </tr>
                                    <tr class="border-b hover:bg-gray-50">
                                        <td class="py-3 px-4">
                                            <input type="checkbox" class="rounded">
                                        </td>
                                        <td class="py-3 px-4 font-medium">佐藤塗装店</td>
                                        <td class="py-3 px-4">C-2025-0849</td>
                                        <td class="py-3 px-4">高橋次郎</td>
                                        <td class="py-3 px-4"><span class="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs">戸建て</span></td>
                                        <td class="text-right py-3 px-4 font-semibold">¥10,000</td>
                                        <td class="text-right py-3 px-4 text-gray-600">¥1,000</td>
                                        <td class="text-right py-3 px-4 font-bold text-blue-600">¥11,000</td>
                                        <td class="py-3 px-4">2025/02/27</td>
                                        <td class="text-center py-3 px-4">
                                            <span class="px-2 py-1 bg-green-100 text-green-700 rounded text-xs">請求済み</span>
                                        </td>
                                        <td class="text-center py-3 px-4">
                                            <button class="text-gray-400 text-sm" disabled>発行済み</button>
                                        </td>
                                    </tr>
                                    <tr class="border-b hover:bg-gray-50">
                                        <td class="py-3 px-4">
                                            <input type="checkbox" class="rounded">
                                        </td>
                                        <td class="py-3 px-4 font-medium">鈴木建装</td>
                                        <td class="py-3 px-4">C-2025-0850</td>
                                        <td class="py-3 px-4">伊藤美咲</td>
                                        <td class="py-3 px-4"><span class="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs">戸建て</span></td>
                                        <td class="text-right py-3 px-4 font-semibold">¥5,000</td>
                                        <td class="text-right py-3 px-4 text-gray-600">¥500</td>
                                        <td class="text-right py-3 px-4 font-bold text-blue-600">¥5,500</td>
                                        <td class="py-3 px-4">2025/02/15</td>
                                        <td class="text-center py-3 px-4">
                                            <span class="px-2 py-1 bg-yellow-100 text-yellow-700 rounded text-xs">未請求</span>
                                        </td>
                                        <td class="text-center py-3 px-4">
                                            <button class="text-blue-600 hover:text-blue-800 text-sm">請求書作成</button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <div class="p-4 bg-gray-50">
                                <div class="flex justify-between items-center">
                                    <div class="text-sm text-gray-600">
                                        紹介料合計: <span class="font-bold text-blue-600 mr-4">¥65,000</span>
                                        成約手数料合計: <span class="font-bold text-green-600 mr-4">¥250,000</span>
                                        請求総額: <span class="font-bold text-purple-600 text-lg">¥315,000</span>
                                    </div>
                                    <button class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm">一括請求書作成</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } else if (sectionName === 'registrationRequests') {
                // 加盟店登録申請セクション
                const mainContent = document.querySelector('main');
                window.location.href = '#registrationRequests';
                mainContent.innerHTML = `
                    <div class="pt-20 px-6 max-w-7xl mx-auto">
                        <div class="mb-8">
                            <h1 class="text-3xl font-bold text-gray-800 mb-2">加盟店登録申請管理</h1>
                            <p class="text-gray-600">新規加盟店の登録申請を審査・承認</p>
                        </div>

                        <!-- ローディング表示 -->
                        <div id="loading-indicator" class="text-center py-8" style="display:none;">
                            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                            <p class="mt-2 text-gray-600">データを読み込み中...</p>
                        </div>

                        <!-- 統計カード -->
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">未審査申請</div>
                                <div id="pending-count" class="text-2xl font-bold text-green-600">-</div>
                                <div class="text-xs text-red-600 mt-1">至急対応</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">今月承認</div>
                                <div id="monthly-approved" class="text-2xl font-bold text-gray-800">-</div>
                                <div class="text-xs text-gray-500 mt-1">前月比 +5</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">承認率</div>
                                <div id="approval-rate" class="text-2xl font-bold text-gray-800">-</div>
                                <div class="text-xs text-green-600 mt-1">高水準</div>
                            </div>
                        </div>
                        
                        <!-- 未審査申請リスト -->
                        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden mb-6">
                            <div class="p-4 bg-green-50 border-b">
                                <h3 class="text-lg font-semibold text-green-800">🆕 未審査の登録申請</h3>
                            </div>
                            <div class="overflow-x-auto hidden md:block">
                            <table id="pending-table" class="w-full min-w-[768px]">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">申請日時</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">会社名</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">代表者名</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">連絡先</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">対応エリア</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ステータス</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">アクション</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    <!-- 動的にデータが挿入される -->
                                </tbody>
                            </table>
                            </div>

                            <!-- モバイル用カード表示 -->
                            <div id="pending-mobile" class="md:hidden p-4 space-y-4">
                                <!-- 動的にデータが挿入される -->
                            </div>
                        </div>

                        <!-- 審査済み履歴 -->
                        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
                            <div class="p-4 bg-gray-50 border-b flex justify-between items-center">
                                <h3 class="text-lg font-semibold text-gray-800">審査済み履歴</h3>
                                <select id="dateRangeSelector" class="px-3 py-1 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-500">
                                    <option value="7">過去1週間</option>
                                    <option value="30" selected>過去1ヶ月</option>
                                    <option value="90">過去3ヶ月</option>
                                    <option value="365">過去1年</option>
                                    <option value="-1">全期間</option>
                                </select>
                            </div>
                            <div class="overflow-x-auto hidden md:block">
                            <table id="approved-table" class="w-full min-w-[768px]">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">申請日時</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">会社名</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">代表者名</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">連絡先</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">対応エリア</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ステータス</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">アクション</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    <!-- 動的にデータが挿入される -->
                                </tbody>
                            </table>
                            </div>

                            <!-- モバイル用カード表示（審査済み） -->
                            <div id="approved-mobile" class="md:hidden p-4 space-y-4">
                                <!-- 動的にデータが挿入される -->
                            </div>
                        </div>
                    </div>
                `;

                // registrationRequestsセクション表示後にデータを取得
                setTimeout(() => {
                    // 独立モジュールのloadRegistrationRequestsDataを呼び出し
                    if (typeof loadRegistrationRequestsData === 'function') {
                        console.log('[Main] Calling loadRegistrationRequestsData...');
                        loadRegistrationRequestsData();
                    } else {
                        console.error('[Main] loadRegistrationRequestsData not found');
                        // フォールバック：古い関数を試す
                        if (typeof refreshDashboard === 'function') {
                            refreshDashboard();
                        }
                    }
                }, 100);

            } else if (sectionName === 'cancelRequests') {
                // キャンセル申請セクション
                const mainContent = document.querySelector('main');
                window.location.href = '#cancelRequests';
                mainContent.innerHTML = `
                    <div class="pt-20 px-6 max-w-7xl mx-auto">
                        <div class="mb-8">
                            <h1 class="text-3xl font-bold text-gray-800 mb-2">キャンセル申請管理</h1>
                            <p class="text-gray-600">加盟店からのキャンセル申請を処理</p>
                        </div>
                        
                        <!-- 統計カード -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">未処理申請</div>
                                <div class="text-2xl font-bold text-purple-600">2件</div>
                                <div class="text-xs text-red-600 mt-1">要対応</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">今月承認</div>
                                <div class="text-2xl font-bold text-gray-800">8件</div>
                                <div class="text-xs text-gray-500 mt-1">前月比 +2</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">今月却下</div>
                                <div class="text-2xl font-bold text-gray-800">3件</div>
                                <div class="text-xs text-gray-500 mt-1">却下率 27%</div>
                            </div>
                            <div class="bg-white rounded-xl p-6 border border-gray-200">
                                <div class="text-sm text-gray-500 mb-2">平均処理時間</div>
                                <div class="text-2xl font-bold text-gray-800">2.5h</div>
                                <div class="text-xs text-green-600 mt-1">目標内</div>
                            </div>
                        </div>
                        
                        <!-- 未処理申請リスト -->
                        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden mb-6">
                            <div class="p-4 bg-purple-50 border-b">
                                <h3 class="text-lg font-semibold text-purple-800">🚨 未処理のキャンセル申請</h3>
                            </div>
                            <table class="w-full">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">申請日時</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">案件ID</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">加盟店</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">顧客エリア</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">理由</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">経過時間</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">アクション</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    <tr class="hover:bg-purple-50 animate-pulse">
                                        <td class="px-6 py-4 text-sm text-gray-900">2025-01-12 14:30</td>
                                        <td class="px-6 py-4 text-sm font-medium text-gray-900">#2024-0885</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">田中塗装工業</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">千葉県船橋市</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">対応不可のため辞退</td>
                                        <td class="px-6 py-4">
                                            <span class="text-sm font-semibold text-red-600">2時間30分</span>
                                        </td>
                                        <td class="px-6 py-4">
                                            <button onclick="showCancelRequest('#2024-0885')" class="px-3 py-1 bg-purple-600 text-white text-xs rounded hover:bg-purple-700">処理</button>
                                        </td>
                                    </tr>
                                    <tr class="hover:bg-purple-50">
                                        <td class="px-6 py-4 text-sm text-gray-900">2025-01-12 15:45</td>
                                        <td class="px-6 py-4 text-sm font-medium text-gray-900">#2024-0887</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">山田ペイント</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">東京都大田区</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">エリア外のため対応不可</td>
                                        <td class="px-6 py-4">
                                            <span class="text-sm font-semibold text-yellow-600">1時間15分</span>
                                        </td>
                                        <td class="px-6 py-4">
                                            <button onclick="showCancelRequest('#2024-0887')" class="px-3 py-1 bg-purple-600 text-white text-xs rounded hover:bg-purple-700">処理</button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- 処理済み履歴 -->
                        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
                            <div class="p-4 bg-gray-50 border-b">
                                <h3 class="text-lg font-semibold text-gray-800">処理済み履歴</h3>
                            </div>
                            <table class="w-full">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">処理日時</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">案件ID</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">加盟店</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">処理結果</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">再振分先</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">処理者</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 text-sm text-gray-900">2025-01-12 10:30</td>
                                        <td class="px-6 py-4 text-sm font-medium text-gray-900">#2024-0880</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">佐藤塗装店</td>
                                        <td class="px-6 py-4">
                                            <span class="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">承認</span>
                                        </td>
                                        <td class="px-6 py-4 text-sm text-gray-900">鈴木建装</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">管理者A</td>
                                    </tr>
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 text-sm text-gray-900">2025-01-12 09:15</td>
                                        <td class="px-6 py-4 text-sm font-medium text-gray-900">#2024-0878</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">高橋塗装</td>
                                        <td class="px-6 py-4">
                                            <span class="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800">却下</span>
                                        </td>
                                        <td class="px-6 py-4 text-sm text-gray-900">-</td>
                                        <td class="px-6 py-4 text-sm text-gray-900">管理者B</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;
            } else if (sectionName === 'ranking') {
                // ランキングセクション
                const mainContent = document.querySelector('main');
                window.location.href = '#ranking';
                mainContent.innerHTML = `
                    <div class="pt-20 px-6 max-w-7xl mx-auto">
                        <div class="mb-8">
                            <h1 class="text-3xl font-bold text-gray-800 mb-2">加盟店ランキング</h1>
                            <p class="text-gray-600">パフォーマンス評価・ハンディキャップ適用</p>
                        </div>
                        
                        <!-- 期間選択 -->
                        <div class="bg-white rounded-xl p-4 mb-6 border border-gray-200">
                            <div class="flex items-center gap-4">
                                <span class="text-sm font-medium text-gray-700">期間:</span>
                                <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                    <option selected>今月</option>
                                    <option>先月</option>
                                    <option>過去3ヶ月</option>
                                    <option>過去6ヶ月</option>
                                    <option>今年度</option>
                                </select>
                                <span class="text-sm font-medium text-gray-700 ml-4">評価項目:</span>
                                <label class="flex items-center">
                                    <input type="checkbox" checked class="mr-2">
                                    <span class="text-sm">成約率</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" checked class="mr-2">
                                    <span class="text-sm">対応速度</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" checked class="mr-2">
                                    <span class="text-sm">顧客満足度</span>
                                </label>
                            </div>
                        </div>
                        
                        <!-- ランキング表 -->
                        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
                            <div class="p-4 bg-gradient-to-r from-yellow-50 to-yellow-100 border-b">
                                <h3 class="text-lg font-semibold text-gray-800">総合ランキング TOP10</h3>
                            </div>
                            <table class="w-full">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">順位</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">加盟店名</th>
                                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">成約率</th>
                                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">対応速度</th>
                                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">満足度</th>
                                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">ハンディ</th>
                                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">総合スコア</th>
                                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">前回</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    <tr class="hover:bg-yellow-50">
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-2xl font-bold text-yellow-500">🥇</div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="flex items-center">
                                                <div class="w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center text-yellow-600 font-semibold mr-3">田</div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">田中塗装工業</div>
                                                    <div class="text-xs text-gray-500">東京都世田谷区</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-green-600">68%</div>
                                            <div class="text-xs text-gray-500">85pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-blue-600">1.2h</div>
                                            <div class="text-xs text-gray-500">92pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-purple-600">4.8</div>
                                            <div class="text-xs text-gray-500">96pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <span class="px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">+1</span>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-lg font-bold text-gray-900">92.3</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <span class="text-green-600">↑2</span>
                                        </td>
                                    </tr>
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-2xl font-bold text-gray-400">🥈</div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="flex items-center">
                                                <div class="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center text-gray-600 font-semibold mr-3">山</div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">山田ペイント</div>
                                                    <div class="text-xs text-gray-500">神奈川県横浜市</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-green-600">62%</div>
                                            <div class="text-xs text-gray-500">78pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-blue-600">1.5h</div>
                                            <div class="text-xs text-gray-500">88pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-purple-600">4.7</div>
                                            <div class="text-xs text-gray-500">94pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <span class="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">0</span>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-lg font-bold text-gray-900">86.7</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <span class="text-gray-600">→</span>
                                        </td>
                                    </tr>
                                    <tr class="hover:bg-orange-50">
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-2xl font-bold text-orange-600">🥉</div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="flex items-center">
                                                <div class="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center text-orange-600 font-semibold mr-3">鈴</div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">鈴木建装</div>
                                                    <div class="text-xs text-gray-500">埼玉県さいたま市</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-green-600">55%</div>
                                            <div class="text-xs text-gray-500">70pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-blue-600">0.8h</div>
                                            <div class="text-xs text-gray-500">95pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-sm font-semibold text-purple-600">4.9</div>
                                            <div class="text-xs text-gray-500">98pt</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">+2</span>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <div class="text-lg font-bold text-gray-900">85.5</div>
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            <span class="text-green-600">↑5</span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;
            }
            
            // メニューのアクティブ状態を更新
            document.querySelectorAll('#sideMenu nav a').forEach(link => {
                link.classList.remove('bg-gradient-to-r', 'from-blue-600', 'to-blue-500', 'text-gray-100');
                link.classList.add('text-gray-400', 'hover:text-gray-100');
                
                if (link.getAttribute('href') === '#' + sectionName) {
                    link.classList.add('bg-gradient-to-r', 'from-blue-600', 'to-blue-500', 'text-gray-100');
                    link.classList.remove('text-gray-400', 'hover:text-gray-100');
                }
            });
        }
        
        // ハッシュ変更時の処理（DOMContentLoadedは後で設定）
        window.addEventListener('hashchange', () => {
            const hash = window.location.hash.slice(1);
            if (hash === 'dashboard') {
                showSection('dashboard');
            }
        });

        // コピー機能
        function copyText(text) {
            navigator.clipboard.writeText(text).then(function() {
                // 成功時の処理（アニメーションなどを追加可能）
                console.log('コピーしました: ' + text);
            });
        }

        // Google Mapリンク生成機能
        function generateGoogleMapLink(postalCode) {
            if (postalCode) {
                // 郵便番号から住所を取得するAPIを呼び出し（実装例）
                console.log('郵便番号: ' + postalCode + ' の住所を取得中...');
            } else {
                const address = document.querySelector('input[value*="東京都"]').value;
                const googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;
                window.open(googleMapsUrl, '_blank');
            }
        }

        // Mapリンクを開く
        function openMapLink() {
            const address = document.querySelector('input[value*="東京都"]').value;
            const googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;
            window.open(googleMapsUrl, '_blank');
        }

        // オプションボタンの選択機能（イベント委任を使用）
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('option-button')) {
                e.target.classList.toggle('selected');
            }
        });

        // 時間スロットの選択機能（後で初期化）
        function initializeTimeSlots() {
            document.querySelectorAll('.time-slot').forEach(slot => {
                slot.addEventListener('click', function() {
                    this.classList.toggle('selected');
                });
            });
        }

        // チェックボックスの変更を監視（後で初期化）
        function initializeCheckboxes() {
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const franchiseItem = this.closest('.franchise-item');
                    if (franchiseItem) {
                        if (this.checked) {
                            franchiseItem.classList.add('selected');
                        } else {
                            franchiseItem.classList.remove('selected');
                        }
                    }
                });
            });
        }

        // AI全項目添削ボタンのクリックイベント
        const aiButton = document.querySelector('.ai-button');
        if (aiButton) {
            aiButton.addEventListener('click', function() {
                alert('AI添削機能を実行します。');
            });
        }

        // グローバル変数
        let currentPage = 1;
        let itemsPerPage = 30;
        let selectedItems = new Set();
        let currentStatusFilter = '';

        // 案件データベース
        console.log('About to define casesData...');
        const casesData = {
            '001': {
                name: '田中太郎',
                nameKana: 'タナカタロウ',
                gender: '男性',
                age: '40代',
                relation: '本人',
                phone: '090-1234-5678',
                email: 'tanaka@example.com',
                propertyType: '戸建て',
                floors: '2階建て',
                buildingAge: '15年',
                area: '120㎡',
                constructionCount: '初回',
                wallMaterial: 'サイディング',
                roofMaterial: 'スレート',
                postalCode: '150-0001',
                address: '東京都渋谷区神宮前1-1-1',
                searchKeyword: '外壁塗装 東京',
                workItems: ['外壁塗装', '屋根塗装（外壁工事含む）'],
                companiesCount: 3,
                status: '配信済',
                date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5日前
                amount: '¥60,000',
                franchiseStatuses: {
                    'franchise1': { name: 'A工務店', status: 'アポ済' },
                    'franchise2': { name: 'B塗装', status: '現調済' },
                    'franchise3': { name: 'C建設', status: '見積提出済' }
                }
            },
            '002': {
                name: '鈴木花子',
                nameKana: 'スズキハナコ',
                gender: '女性',
                age: '50代',
                relation: '本人',
                phone: '080-9876-5432',
                email: 'suzuki@example.com',
                propertyType: 'マンション',
                floors: '5階建て',
                buildingAge: '8年',
                area: '85㎡',
                constructionCount: '2回目',
                wallMaterial: 'モルタル',
                roofMaterial: '瓦',
                postalCode: '160-0022',
                address: '東京都新宿区新宿2-2-2',
                searchKeyword: '外壁塗装 マンション',
                workItems: ['外壁塗装', 'ベランダ防水（外壁工事含む）'],
                companiesCount: 3,
                status: '配信中',
                date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2日前
                amount: '¥45,000',
                franchiseStatuses: {
                    'franchise1': { name: 'D外装工業', status: '新規配信' },
                    'franchise2': { name: 'E塗装店', status: '配信済' },
                    'franchise3': { name: 'F建設工業', status: '配信済' }
                }
            },
            '003': {
                name: '佐藤一郎',
                nameKana: 'サトウイチロウ',
                gender: '男性',
                age: '60代',
                relation: '本人',
                phone: '070-5555-7777',
                email: 'sato@example.com',
                propertyType: '戸建て',
                floors: '2階建て',
                buildingAge: '25年',
                area: '150㎡',
                constructionCount: '3回目以上',
                wallMaterial: 'ALC',
                roofMaterial: '金属',
                postalCode: '140-0013',
                address: '東京都品川区南大井3-3-3',
                searchKeyword: '屋根替え 外壁工事',
                workItems: ['屋根葺き替え・張り替え（スレート・ガルバリウム等）', '外壁補修（外壁工事含む）'],
                companiesCount: 3,
                status: '見込み',
                date: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10日前
                amount: '¥90,000',
                franchiseStatuses: {}
            },
            '004': {
                name: '山田次郎',
                nameKana: 'ヤマダジロウ',
                gender: '男性',
                age: '30代',
                relation: '本人',
                phone: '090-1111-2222',
                email: 'yamada@example.com',
                propertyType: '戸建て',
                floors: '3階建て',
                buildingAge: '10年',
                area: '100㎡',
                constructionCount: '初回',
                wallMaterial: 'サイディング',
                roofMaterial: 'スレート',
                postalCode: '151-0001',
                address: '東京都渋谷区代々木1-1-1',
                searchKeyword: '外壁塗装 渋谷',
                workItems: ['外壁塗装', '外壁補修（外壁工事含む）'],
                companiesCount: 2,
                status: '新規',
                date: new Date(),
                amount: '¥80,000',
                franchiseStatuses: {}
            },
            '005': {
                name: '高橋美咲',
                nameKana: 'タカハシミサキ',
                gender: '女性',
                age: '40代',
                relation: '本人',
                phone: '080-3333-4444',
                email: 'takahashi@example.com',
                propertyType: 'マンション',
                floors: '8階建て',
                buildingAge: '20年',
                area: '75㎡',
                constructionCount: '2回目',
                wallMaterial: 'タイル',
                roofMaterial: '陸屋根',
                postalCode: '162-0001',
                address: '東京都新宿区市谷1-1-1',
                searchKeyword: 'マンション 防水',
                workItems: ['屋上防水（外壁工事含む）', 'ベランダ防水（外壁工事含む）'],
                companiesCount: 3,
                status: '不在',
                date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
                amount: '¥60,000',
                callHistory: [
                    { date: '2025-01-10 10:30', note: '初回架電、不在。再架電予定。' }
                ],
                franchiseStatuses: {}
            },
            '006': {
                name: '伊藤健一',
                nameKana: 'イトウケンイチ',
                gender: '男性',
                age: '50代',
                relation: '本人',
                phone: '070-5555-6666',
                email: 'ito@example.com',
                propertyType: '店舗',
                floors: '2階建て',
                buildingAge: '30年',
                area: '200㎡',
                constructionCount: '3回目以上',
                wallMaterial: 'モルタル',
                roofMaterial: '瓦',
                postalCode: '141-0001',
                address: '東京都品川区北品川1-1-1',
                searchKeyword: '店舗 外壁',
                workItems: ['外壁カバー工法', '屋根カバー工法'],
                companiesCount: 4,
                status: '再架電',
                date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
                amount: '¥120,000',
                callHistory: [
                    { date: '2025-01-08 14:00', note: '初回架電。見積もり希望。' },
                    { date: '2025-01-09 11:00', note: '資料送付の確認。次回架電予定。' }
                ],
                franchiseStatuses: {}
            },
            '007': {
                name: '渡辺陽子',
                nameKana: 'ワタナベヨウコ',
                gender: '女性',
                age: '60代',
                relation: '配偶者',
                phone: '090-7777-8888',
                email: 'watanabe@example.com',
                propertyType: '戸建て',
                floors: '平屋',
                buildingAge: '35年',
                area: '90㎡',
                constructionCount: '初回',
                wallMaterial: 'ALC',
                roofMaterial: '瓦',
                postalCode: '143-0001',
                address: '東京都大田区東海1-1-1',
                searchKeyword: '屋根葺き替え',
                workItems: ['屋根葺き替え・張り替え（瓦）', '雨漏り修繕'],
                companiesCount: 3,
                status: '配信済',
                date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                amount: '¥100,000',
                franchiseStatuses: {
                    'franchise1': { name: 'G屋根工事', status: '見積提出済' },
                    'franchise2': { name: 'H建築', status: 'アポ済' },
                    'franchise3': { name: 'I工務店', status: '検討中' }
                }
            },
            '008': {
                name: '中村太一',
                nameKana: 'ナカムラタイチ',
                gender: '男性',
                age: '40代',
                relation: '本人',
                phone: '080-9999-0000',
                email: 'nakamura@example.com',
                propertyType: 'アパート',
                floors: '3階建て',
                buildingAge: '15年',
                area: '250㎡',
                constructionCount: '2回目',
                wallMaterial: 'サイディング',
                roofMaterial: 'スレート',
                postalCode: '144-0001',
                address: '東京都大田区蒲田1-1-1',
                searchKeyword: 'アパート 塗装',
                workItems: ['外壁塗装', '屋根塗装（外壁工事含む）', '鉄部塗装'],
                companiesCount: 3,
                status: '新規',
                date: new Date(),
                amount: '¥150,000',
                franchiseStatuses: {}
            }
        };
        
        console.log('casesData defined successfully:', Object.keys(casesData).length + ' cases');
        console.log('Case IDs:', Object.keys(casesData));

        // 紹介料計算ロジック
        function calculateIntroductionFee(workItems, propertyType, floors, companiesCount) {
            // 料金設定
            const basicItems = {
                '外壁塗装': 20000,
                '外壁カバー工法': 20000,
                '外壁張替え': 20000,
                '屋根塗装（外壁工事含む）': 20000,
                '屋上防水（外壁工事含む）': 20000,
                '屋根葺き替え・張り替え（スレート・ガルバリウム等）': 20000,
                '屋根葺き替え・張り替え（瓦）': 20000,
                '屋根カバー工法': 20000,
                '外壁補修（外壁工事含む）': 20000,
                '屋根補修（外壁工事含む）': 20000,
                'ベランダ防水（外壁工事含む）': 20000,
                '内装水回り（バス・キッチン・トイレ）（外壁工事含む）': 20000,
                '内装（フローリングや畳などの床・クロス等）（外壁工事含む）': 20000
            };
            
            const singleItems = {
                '屋根塗装単品': companiesCount === 1 ? 20000 : 10000,
                '屋上防水単品': companiesCount === 1 ? 20000 : 10000,
                '外壁補修単品': companiesCount === 1 ? 20000 : 5000,
                '屋根補修単品': companiesCount === 1 ? 20000 : 5000,
                'ベランダ防水単品': companiesCount === 1 ? 20000 : 5000
            };
            
            let maxFee = 0;
            
            // 各工事項目をチェックし、最高額を取得
            workItems.forEach(item => {
                let fee = 0;
                
                // 基本項目をチェック
                if (basicItems[item]) {
                    fee = basicItems[item];
                    
                    // 3階以上のアパート・マンションの場合、30,000円に変更
                    if ((propertyType === 'アパート' || propertyType === 'マンション') && 
                        floors && (floors.includes('3階') || floors.includes('4階') || floors.includes('5階') || floors.includes('6階') || parseInt(floors) >= 3)) {
                        fee = 30000;
                    }
                }
                
                // 単品項目をチェック
                if (singleItems[item]) {
                    fee = singleItems[item];
                }
                
                maxFee = Math.max(maxFee, fee);
            });
            
            return maxFee;
        }

        // 案件選択機能

        // フォームに案件データを反映
        function populateForm(caseId) {
            const data = casesData[caseId];
            if (!data) return;
            
            // CRMコンテンツ内の入力フィールドを取得
            const crmContent = document.getElementById('crmContent');
            if (!crmContent) return;
            
            // ご本人さま情報（最初の入力フィールドを使用）
            const nameInput = crmContent.querySelector('input[type="text"]');
            if (nameInput) {
                nameInput.value = data.name;
            }
            
            const kanaInput = crmContent.querySelectorAll('input[type="text"]')[1];
            if (kanaInput) {
                kanaInput.value = data.nameKana || '';
            }
            
            // セレクトボックスの値を設定
            setSelectValue('性別', data.gender);
            setSelectValue('年齢', data.age);
            setSelectValue('関係性', data.relation);
            
            // 電話番号とメール
            document.querySelector('input[type="tel"]').value = data.phone;
            document.querySelector('input[type="email"]').value = data.email;
            
            // 物件プロフィール
            setSelectValue('依頼物件種別', data.propertyType);
            setSelectValue('階数', data.floors);
            document.querySelector('input[value*="15年"], input[value*="8年"], input[value*="25年"]').value = data.age;
            document.querySelector('input[value*="120㎡"], input[value*="85㎡"], input[value*="150㎡"]').value = data.area;
            setSelectValue('施工回数', data.constructionCount);
            setSelectValue('外壁材質', data.wallMaterial);
            setSelectValue('屋根材質', data.roofMaterial);
            
            // 郵便番号と住所
            document.querySelector('input[value*="150-0001"], input[value*="160-0022"], input[value*="140-0013"]').value = data.postalCode;
            document.querySelector('input[value*="東京都"]').value = data.address;
            
            // 流入検索ワード
            document.querySelector('input[value*="外壁塗装 東京"], input[value*="外壁塗装 マンション"], input[value*="屋根替え 外壁工事"]').value = data.searchKeyword;
            
            // 見積もり希望箇所と特殊要件のボタンを選択状態にする
            if (crmContent && data.workItems && Array.isArray(data.workItems)) {
                // まず全てのボタンの選択を解除
                crmContent.querySelectorAll('.option-button').forEach(button => {
                    button.classList.remove('selected');
                });
                
                // データに基づいてボタンを選択
                data.workItems.forEach(item => {
                    crmContent.querySelectorAll('.option-button').forEach(button => {
                        const buttonText = button.textContent.trim();
                        // 完全一致または部分一致でチェック
                        if (buttonText === '外壁塗装' && item.includes('外壁塗装')) {
                            button.classList.add('selected');
                        } else if (buttonText === '屋根塗装' && item.includes('屋根塗装')) {
                            button.classList.add('selected');
                        } else if (buttonText === '屋上防水' && item.includes('屋上防水')) {
                            button.classList.add('selected');
                        } else if (buttonText === '屋根葺き替え・張り替え（スレート・ガルバリウム等）' && item.includes('屋根葺き替え')) {
                            button.classList.add('selected');
                        } else if (buttonText === '屋根葺き替え・張り替え（瓦）' && item.includes('屋根葺き替え') && item.includes('瓦')) {
                            button.classList.add('selected');
                        } else if (buttonText === '屋根カバー工法' && item.includes('屋根カバー')) {
                            button.classList.add('selected');
                        } else if (buttonText === '外壁補修' && item.includes('外壁補修')) {
                            button.classList.add('selected');
                        } else if (buttonText === '屋根補修' && item.includes('屋根補修')) {
                            button.classList.add('selected');
                        } else if (buttonText === 'ベランダ防水' && item.includes('ベランダ防水')) {
                            button.classList.add('selected');
                        } else if (buttonText === '内装水回り（バス・キッチン・トイレ）' && item.includes('内装水回り')) {
                            button.classList.add('selected');
                        }
                    });
                });
            }
        }


        // セレクトボックスの値を設定するヘルパー関数
        function setSelectValue(labelText, value) {
            const labels = document.querySelectorAll('label');
            for (let label of labels) {
                if (label.textContent.includes(labelText)) {
                    const select = label.parentElement.querySelector('select');
                    if (select) {
                        for (let option of select.options) {
                            if (option.text === value) {
                                option.selected = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        }

        // 検索・フィルター機能
        function initializeSearchAndFilter() {
            const searchInput = document.getElementById('searchInput');
            const statusFilters = document.querySelectorAll('.status-filter');
            const sortSelect = document.getElementById('sortSelect');
            
            // 検索機能
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    filterCases();
                });
            }
            
            // ステータスフィルター
            if (statusFilters) {
                statusFilters.forEach(button => {
                    button.addEventListener('click', function() {
                        // アクティブ状態の切り替え
                        statusFilters.forEach(btn => {
                            btn.classList.remove('active', 'bg-blue-600', 'text-white');
                            btn.classList.add('bg-gray-200', 'text-gray-700');
                        });
                        this.classList.add('active', 'bg-blue-600', 'text-white');
                        this.classList.remove('bg-gray-200', 'text-gray-700');
                        
                        filterCases();
                    });
                });
            }
            
            // ソート機能
            if (sortSelect) {
                sortSelect.addEventListener('change', function() {
                    filterCases();
                });
            }
        }
        
        // ステータスでフィルタリング（統計クリック用）
        function filterByStatus(status) {
            // 新規案件のみ表示
            filterBySpecificStatus('新規');
        }
        
        // 対応中優先順でソート（見込み→再架電→不在）
        
        // 新規ボタンのフィルタリング
        function filterByNewStatus() {
            if (currentView !== 'list') {
                switchView('list');
            }
            
            currentStatusFilter = '新規';
            initializeListView();
        }
        
        // 見込みソート（見込み→再架電の順）
        function filterByProspect() {
            // リストビューに切り替え
            if (currentView !== 'list') {
                switchView('list');
            }
            
            const today = new Date().toDateString();
            const tbody = document.getElementById('casesListBody');
            tbody.innerHTML = '';
            
            // 見込みと再架電の案件をフィルタリング
            const filteredCases = Object.entries(casesData)
                .filter(([_, caseData]) => {
                    return caseData.status === '見込み' || caseData.status === '再架電';
                })
                .sort((a, b) => {
                    // 見込み→再架電の順
                    const priority = {'見込み': 1, '再架電': 2};
                    return priority[a[1].status] - priority[b[1].status];
                });
            
            // フィルタリングした案件を表示
            filteredCases.forEach(([caseId, caseData]) => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 cursor-pointer';
                row.ondblclick = () => openCRM(caseId);
                row.innerHTML = `
                    <td class="px-3 py-4 whitespace-nowrap">
                        <input type="checkbox" class="rounded text-blue-600" onchange="updateSelectedCount()">
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap">
                        <span class="px-2 py-1 text-xs rounded-full ${getStatusColor(caseData.status)}">
                            ${caseData.status}
                        </span>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap font-medium text-gray-900">
                        ${caseData.name}
                    </td>
                    <td class="px-4 py-4 text-center">
                        <div class="flex justify-center items-center space-x-2">
                            <button onclick="event.stopPropagation(); window.location.href='tel:${caseData.phone}'" class="text-xl hover:scale-110 transition-transform" title="電話">
                                📞
                            </button>
                            <button onclick="event.stopPropagation(); window.location.href='sms:${caseData.phone}'" class="text-xl hover:scale-110 transition-transform" title="SMS">
                                💬
                            </button>
                            <button onclick="event.stopPropagation(); sendData('${caseId}')" class="text-xl hover:scale-110 transition-transform" title="送信">
                                📤
                            </button>
                            <button onclick="event.stopPropagation(); quickActionList('不在', '${caseId}')" class="px-2 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600">
                                不在
                            </button>
                            <button onclick="event.stopPropagation(); openCallHistoryModal('${caseId}')" class="text-xl hover:scale-110 transition-transform" title="メモ">
                                📝
                            </button>
                        </div>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap text-gray-600">
                        <div class="relative group">
                            <div class="cursor-pointer" onclick="event.stopPropagation(); toggleWorkDetails('${caseId}')">
                                ${getPropertyIcon(caseData.propertyType)} ${getFloorDisplay(caseData.propertyType, caseData.floors)}
                            </div>
                            <!-- 施工内容の詳細表示 -->
                            <div id="work-details-${caseId}" class="absolute bottom-full left-0 mb-2 hidden group-hover:block z-50">
                                <div class="bg-gray-900 text-white text-xs rounded-lg py-2 px-3 max-w-xs">
                                    <div class="font-semibold mb-1">施工内容:</div>
                                    ${caseData.workItems ? caseData.workItems.map(item => `<div>• ${item}</div>`).join('') : '未設定'}
                                    <div class="absolute top-full left-4 -mt-1">
                                        <div class="border-4 border-transparent border-t-gray-900"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap text-gray-900 font-medium">
                        ${caseData.amount.replace('¥', '¥').replace(',000', 'K')}
                    </td>
                    <td class="px-3 py-4 whitespace-nowrap text-center">
                        <button onclick="event.stopPropagation(); openCRM('${caseId}')" class="text-blue-600 hover:text-blue-800">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                            </svg>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // 対応中ソート（1ヶ月以内の不在を新しい順）
        function filterByAbsent() {
            // リストビューに切り替え
            if (currentView !== 'list') {
                switchView('list');
            }
            
            const oneMonthAgo = new Date();
            oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
            const tbody = document.getElementById('casesListBody');
            tbody.innerHTML = '';
            
            // 1ヶ月以内の不在案件をフィルタリング
            const filteredCases = Object.entries(casesData)
                .filter(([_, caseData]) => {
                    if (caseData.status !== '不在') return false;
                    const caseDate = new Date(caseData.date || Date.now());
                    return caseDate >= oneMonthAgo;
                })
                .sort((a, b) => {
                    // 新しい順に並べる
                    return new Date(b[1].date || Date.now()) - new Date(a[1].date || Date.now());
                });
            
            // フィルタリングした案件を表示
            filteredCases.forEach(([caseId, caseData]) => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 cursor-pointer';
                row.ondblclick = () => openCRM(caseId);
                row.innerHTML = `
                    <td class="px-3 py-4 whitespace-nowrap">
                        <input type="checkbox" class="rounded text-blue-600" onchange="updateSelectedCount()">
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap">
                        <span class="px-2 py-1 text-xs rounded-full ${getStatusColor(caseData.status)}">
                            ${caseData.status}
                        </span>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap font-medium text-gray-900">
                        ${caseData.name}
                    </td>
                    <td class="px-4 py-4 text-center">
                        <div class="flex justify-center items-center space-x-2">
                            <button onclick="event.stopPropagation(); window.location.href='tel:${caseData.phone}'" class="text-xl hover:scale-110 transition-transform" title="電話">
                                📞
                            </button>
                            <button onclick="event.stopPropagation(); window.location.href='sms:${caseData.phone}'" class="text-xl hover:scale-110 transition-transform" title="SMS">
                                💬
                            </button>
                            <button onclick="event.stopPropagation(); sendData('${caseId}')" class="text-xl hover:scale-110 transition-transform" title="送信">
                                📤
                            </button>
                            <button onclick="event.stopPropagation(); quickActionList('不在', '${caseId}')" class="px-2 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600">
                                不在
                            </button>
                            <button onclick="event.stopPropagation(); openCallHistoryModal('${caseId}')" class="text-xl hover:scale-110 transition-transform" title="メモ">
                                📝
                            </button>
                        </div>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap text-gray-600">
                        <div class="relative group">
                            <div class="cursor-pointer" onclick="event.stopPropagation(); toggleWorkDetails('${caseId}')">
                                ${getPropertyIcon(caseData.propertyType)} ${getFloorDisplay(caseData.propertyType, caseData.floors)}
                            </div>
                            <!-- 施工内容の詳細表示 -->
                            <div id="work-details-${caseId}" class="absolute bottom-full left-0 mb-2 hidden group-hover:block z-50">
                                <div class="bg-gray-900 text-white text-xs rounded-lg py-2 px-3 max-w-xs">
                                    <div class="font-semibold mb-1">施工内容:</div>
                                    ${caseData.workItems ? caseData.workItems.map(item => `<div>• ${item}</div>`).join('') : '未設定'}
                                    <div class="absolute top-full left-4 -mt-1">
                                        <div class="border-4 border-transparent border-t-gray-900"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap text-gray-900 font-medium">
                        ${caseData.amount.replace('¥', '¥').replace(',000', 'K')}
                    </td>
                    <td class="px-3 py-4 whitespace-nowrap text-center">
                        <button onclick="event.stopPropagation(); openCRM('${caseId}')" class="text-blue-600 hover:text-blue-800">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                            </svg>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function filterByPriority() {
            // 後方互換性のため残す
            filterByProspect();
        }
        
        // ソートモーダルを開く
        function openSortModal() {
            document.getElementById('sortModal').classList.remove('hidden');
        }
        
        // ソートモーダルを閉じる
        function closeSortModal() {
            document.getElementById('sortModal').classList.add('hidden');
        }
        
        // 特定のステータスでフィルタリング
        function filterBySpecificStatus(status) {
            // モーダルを閉じる
            closeSortModal();
            
            // リストビューに切り替え
            if (currentView !== 'list') {
                switchView('list');
            }
            
            // 指定されたステータスの案件のみ表示
            initializeListView(); // まずすべての案件を表示
            const rows = document.querySelectorAll('#casesListBody tr');
            rows.forEach(row => {
                const statusElement = row.querySelector('td:nth-child(2) span');
                const rowStatus = statusElement?.textContent.trim() || '';
                
                if (rowStatus === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // 案件フィルタリング機能
        function filterCases() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const activeStatus = document.querySelector('.status-filter.active')?.dataset.status || 'all';
            const sortOption = document.getElementById('sortSelect').value;
            
            // リストビューの行をフィルタリング
            const rows = document.querySelectorAll('#casesListBody tr');
            rows.forEach(row => {
                const name = row.querySelector('td:nth-child(3)')?.textContent.toLowerCase() || '';
                const phone = row.querySelector('td:nth-child(4)')?.textContent || '';
                const address = row.querySelector('td:nth-child(5)')?.textContent.toLowerCase() || '';
                const statusElement = row.querySelector('td:nth-child(2) span');
                const status = statusElement?.textContent.trim() || '';
                
                const matchesSearch = searchTerm === '' || 
                    name.includes(searchTerm) || 
                    phone.includes(searchTerm) || 
                    address.includes(searchTerm);
                
                const matchesStatus = activeStatus === 'all' || 
                    (activeStatus === 'new' && status === '新規') ||
                    (activeStatus === 'distributing' && status === '配信中') ||
                    (activeStatus === 'distributed' && status === '配信済') ||
                    (activeStatus === 'completed' && status === '完了');
                
                if (matchesSearch && matchesStatus) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
        
        // ステータスに応じた色を返すヘルパー関数
        function getStatusColor(status) {
            const colorMap = {
                // 管理ステータス
                '新規': 'bg-blue-100 text-blue-700',
                '不在': 'bg-gray-100 text-gray-700',
                '再架電': 'bg-yellow-100 text-yellow-700',
                '見込み': 'bg-emerald-100 text-emerald-700',
                'ロスト': 'bg-red-100 text-red-700',
                '配信中': 'bg-yellow-100 text-yellow-700',
                '配信済': 'bg-green-100 text-green-700',
                '他社契約済': 'bg-gray-100 text-gray-700',
                '無効': 'bg-gray-100 text-gray-700',
                'クレーム': 'bg-red-100 text-red-700',
                // 配信後ステータス
                'アポ済': 'bg-emerald-100 text-emerald-700',
                '現調済': 'bg-emerald-100 text-emerald-700',
                '見積提出済': 'bg-emerald-100 text-emerald-700',
                '入金予定': 'bg-purple-100 text-purple-700',
                '完了': 'bg-purple-100 text-purple-700',
                '紹介後キャンセル': 'bg-red-100 text-red-700',
                '現調前キャンセル': 'bg-red-100 text-red-700',
                '現調後ロスト': 'bg-red-100 text-red-700'
            };
            return colorMap[status] || 'bg-gray-100 text-gray-700';
        }

        // 統計カウントを更新
        function updateStatsCounts() {
            // 新規件数
            const newCount = Object.values(casesData).filter(c => c.status === '新規').length;
            document.getElementById('newCount').textContent = newCount;
            
            // 見込み＋再架電件数
            const prospectCount = Object.values(casesData).filter(c => c.status === '見込み' || c.status === '再架電').length;
            document.getElementById('prospectCount').textContent = prospectCount;
            
            // 直近1ヶ月の不在件数
            const oneMonthAgo = new Date();
            oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
            const absentCount = Object.values(casesData).filter(c => {
                if (c.status !== '不在') return false;
                const caseDate = new Date(c.date || Date.now());
                return caseDate >= oneMonthAgo;
            }).length;
            document.getElementById('absentCount').textContent = absentCount;
            
            // 予測金額（現在表示されている案件の合計）
            let totalAmount = 0;
            const visibleRows = document.querySelectorAll('#casesListBody tr:not([style*="display: none"])');
            visibleRows.forEach(row => {
                const amountCell = row.querySelector('td:nth-last-child(3)');
                if (amountCell) {
                    const amountText = amountCell.textContent.replace('¥', '').replace('K', '000');
                    totalAmount += parseInt(amountText) || 0;
                }
            });
            document.getElementById('predictedAmount').textContent = '¥' + Math.round(totalAmount / 1000) + 'K';
        }

        // キャンセル申請処理モーダル
        function showCancelRequest(caseId) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
            modal.innerHTML = `
                <div class="bg-white rounded-xl p-6 max-w-md w-full mx-4">
                    <h3 class="text-xl font-bold text-gray-800 mb-4">🚨 キャンセル申請処理</h3>
                    <div class="bg-purple-50 p-4 rounded-lg mb-4">
                        <p class="text-sm text-gray-700 mb-2"><strong>案件ID:</strong> ${caseId}</p>
                        <p class="text-sm text-gray-700 mb-2"><strong>加盟店:</strong> 田中塗装工業</p>
                        <p class="text-sm text-gray-700 mb-2"><strong>理由:</strong> 対応不可のため辞退</p>
                        <p class="text-sm text-gray-700"><strong>申請日時:</strong> 2025-01-12 14:30</p>
                    </div>
                    
                    <div class="flex gap-3">
                        <button onclick="processCancelRequest('${caseId}')" class="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                            承認
                        </button>
                        <button onclick="rejectCancelRequest('${caseId}')" class="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                            却下
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        function processCancelRequest(caseId) {
            if (confirm('キャンセル申請を承認しますか？')) {
                alert(`案件 ${caseId} のキャンセルを承認しました。`);
                document.querySelector('.fixed').remove();
                updateCancelRequestCount(-1);
            }
        }

        function rejectCancelRequest(caseId) {
            if (confirm('キャンセル申請を却下しますか？')) {
                alert(`案件 ${caseId} のキャンセル申請を却下しました。\n\n加盟店に通知を送信します。`);
                document.querySelector('.fixed').remove();
                updateCancelRequestCount(-1);
            }
        }
        
        function updateCancelRequestCount(change) {
            const badge = document.getElementById('cancelRequestBadge');
            if (badge) {
                const currentCount = parseInt(badge.querySelector('span').textContent) || 0;
                const newCount = Math.max(0, currentCount + change);
                if (newCount > 0) {
                    badge.querySelector('span').textContent = newCount;
                } else {
                    badge.style.display = 'none';
                }
            }
        }
        
        // 加盟店登録申請を承認
        function approveRegistration(registrationId) {
            if (confirm(`申請ID: ${registrationId} を承認しますか？`)) {
                // 承認処理（実際はAPIコール）
                console.log(`承認処理: ${registrationId}`);

                // 成功通知を表示
                const notification = document.createElement('div');
                notification.className = 'fixed top-20 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center';
                notification.innerHTML = `
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    申請を承認しました
                `;
                document.body.appendChild(notification);
                setTimeout(() => notification.remove(), 3000);

                // 該当行を削除または更新（実際は再読み込み）
                location.reload();
            }
        }

        // 加盟店登録申請を却下
        function rejectRegistration(registrationId) {
            const reason = prompt(`申請ID: ${registrationId} を却下する理由を入力してください：`);
            if (reason) {
                // 却下処理（実際はAPIコール）
                console.log(`却下処理: ${registrationId}, 理由: ${reason}`);

                // 成功通知を表示
                const notification = document.createElement('div');
                notification.className = 'fixed top-20 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center';
                notification.innerHTML = `
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    申請を却下しました
                `;
                document.body.appendChild(notification);
                setTimeout(() => notification.remove(), 3000);

                // 該当行を削除または更新（実際は再読み込み）
                location.reload();
            }
        }

        // 電話をかける
        function callRegistration(phoneNumber) {
            console.log(`電話番号: ${phoneNumber}`);
            // 実際のアプリケーションでは電話アプリを起動
            window.location.href = `tel:${phoneNumber}`;
        }

        // メールを送信
        function emailRegistration(email) {
            console.log(`メールアドレス: ${email}`);
            // メールクライアントを起動
            window.location.href = `mailto:${email}`;
        }

        // SNS連絡
        function snsRegistration(registrationId) {
            console.log(`SNS連絡: ${registrationId}`);
            // 実際のアプリケーションではSNS/チャットツールとの連携
            alert(`SNSで連絡します: ${registrationId}`);
        }

        // 加盟店登録申請詳細モーダル
        function showRegistrationDetail(registrationId) {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
            modal.innerHTML = `
                <div class="bg-white rounded-xl p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                    <h3 class="text-xl font-bold text-gray-800 mb-4">🆕 加盟店登録申請詳細</h3>
                    
                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <h4 class="text-sm font-semibold text-gray-700 mb-3">会社情報</h4>
                            <div class="space-y-2 text-sm">
                                <p><strong>会社名:</strong> 株式会社ペイントプロ</p>
                                <p><strong>代表者:</strong> 中村太郎</p>
                                <p><strong>設立年:</strong> 2015年</p>
                                <p><strong>資本金:</strong> 500万円</p>
                                <p><strong>従業員数:</strong> 8名</p>
                                <p><strong>建設業許可:</strong> 神奈川県知事許可(般-30)第12345号</p>
                            </div>
                        </div>
                        
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <h4 class="text-sm font-semibold text-gray-700 mb-3">連絡先情報</h4>
                            <div class="space-y-2 text-sm">
                                <p><strong>住所:</strong> 神奈川県川崎市幸区堀川町580</p>
                                <p><strong>電話:</strong> 044-123-4567</p>
                                <p><strong>メール:</strong> nakamura@paintpro.jp</p>
                                <p><strong>Web:</strong> https://paintpro.jp</p>
                                <p><strong>対応エリア:</strong> 川崎市、横浜市鶴見区</p>
                            </div>
                        </div>
                        
                        <div class="bg-blue-50 p-4 rounded-lg">
                            <h4 class="text-sm font-semibold text-gray-700 mb-3">実績情報</h4>
                            <div class="space-y-2 text-sm">
                                <p><strong>年間施工件数:</strong> 120件</p>
                                <p><strong>主要取引先:</strong> 大和ハウス、積水ハウス</p>
                                <p><strong>得意分野:</strong> 戸建て外壁塗装、屋根塗装</p>
                                <p><strong>保証内容:</strong> 10年保証</p>
                            </div>
                        </div>
                        
                        <div class="bg-yellow-50 p-4 rounded-lg">
                            <h4 class="text-sm font-semibold text-gray-700 mb-3">希望条件</h4>
                            <div class="space-y-2 text-sm">
                                <p><strong>希望紹介数:</strong> 月間10件程度</p>
                                <p><strong>対応可能日:</strong> 平日・土曜</p>
                                <p><strong>特記事項:</strong> 集合住宅対応可能</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-green-50 p-4 rounded-lg mb-6">
                        <h4 class="text-sm font-semibold text-green-800 mb-2">審査チェックリスト</h4>
                        <div class="grid grid-cols-2 gap-2 text-sm">
                            <label class="flex items-center">
                                <input type="checkbox" checked class="mr-2">
                                <span>建設業許可確認済み</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" checked class="mr-2">
                                <span>保険加入確認済み</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" checked class="mr-2">
                                <span>資本金確認済み</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" checked class="mr-2">
                                <span>実績確認済み</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" class="mr-2">
                                <span>現地確認済み</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" class="mr-2">
                                <span>与信調査済み</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="flex gap-3">
                        <button onclick="approveRegistration('${registrationId}')" class="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                            承認してメール送信
                        </button>
                        <button onclick="rejectRegistration('${registrationId}')" class="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                            却下
                        </button>
                        <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400">
                            閉じる
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        function approveRegistration(registrationId) {
            if (confirm('この申請を承認しますか？\n\n承認後、初回ログイン情報がメール送信されます。')) {
                alert(`申請 ${registrationId} を承認しました。\n\n加盟店ID: F033\n初回ログイン情報をメール送信しました。`);
                document.querySelector('.fixed').remove();
                updateRegistrationRequestCount(-1);
            }
        }
        
        function rejectRegistration(registrationId) {
            const reason = prompt('却下理由を入力してください：');
            if (reason && confirm('本当に却下しますか？')) {
                alert(`申請 ${registrationId} を却下しました。\n\n理由: ${reason}\n申請者に通知を送信します。`);
                document.querySelector('.fixed').remove();
                updateRegistrationRequestCount(-1);
            }
        }
        
        function updateRegistrationRequestCount(change) {
            const badge = document.getElementById('registrationRequestBadge');
            if (badge) {
                const currentCount = parseInt(badge.querySelector('span').textContent) || 0;
                const newCount = Math.max(0, currentCount + change);
                if (newCount > 0) {
                    badge.querySelector('span').textContent = newCount;
                } else {
                    badge.style.display = 'none';
                }
            }
        }
        
        // リストビューの初期化
        function initializeListView() {
            console.log('initializeListView called');
            console.log('casesData:', casesData);
            console.log('casesData keys:', Object.keys(casesData));
            
            const tbody = document.getElementById('casesListBody');
            if (!tbody) {
                console.error('casesListBody element not found!');
                return;
            }
            tbody.innerHTML = '';
            
            // フィルタリング
            let allCases = Object.entries(casesData);
            console.log('Total cases:', allCases.length);
            if (currentStatusFilter) {
                allCases = allCases.filter(([_, caseData]) => caseData.status === currentStatusFilter);
            }
            
            // 全データを取得
            // const allCases = Object.entries(casesData);
            const totalItems = allCases.length;
            
            // ページネーション計算
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
            const pageCases = allCases.slice(startIndex, endIndex);
            
            // ページネーション情報を更新
            updatePaginationInfo(totalItems, startIndex, endIndex);
            
            // 統計カウントを更新
            updateStatsCounts();
            
            // 現在のページのデータを表示
            pageCases.forEach(([caseId, caseData]) => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 cursor-pointer';
                row.ondblclick = () => openCRM(caseId); // ダブルクリックでCRMを開く
                const statusColor = getStatusColor(caseData.status);
                const fee = calculateIntroductionFee(
                    caseData.workItems, 
                    caseData.propertyType, 
                    caseData.floors, 
                    caseData.companiesCount
                );
                
                row.innerHTML = `
                    <td class="px-3 py-4 whitespace-nowrap">
                        <input type="checkbox" class="rounded text-blue-600 case-checkbox" data-case-id="${caseId}" onchange="updateSelectedCount()">
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap">
                        <select class="text-xs border rounded px-2 py-1" onchange="changeStatus('${caseId}', this.value)" onclick="event.stopPropagation()">
                            <option value="新規" ${caseData.status === '新規' ? 'selected' : ''}>新規</option>
                            <option value="不在" ${caseData.status === '不在' ? 'selected' : ''}>不在</option>
                            <option value="再架電" ${caseData.status === '再架電' ? 'selected' : ''}>再架電</option>
                            <option value="見込み" ${caseData.status === '見込み' ? 'selected' : ''}>見込み</option>
                            <option value="ロスト" ${caseData.status === 'ロスト' ? 'selected' : ''}>ロスト</option>
                            <option value="配信中" ${caseData.status === '配信中' ? 'selected' : ''}>配信中</option>
                            <option value="配信済" ${caseData.status === '配信済' ? 'selected' : ''}>配信済</option>
                            <option value="他社契約済" ${caseData.status === '他社契約済' ? 'selected' : ''}>他社契約済</option>
                            <option value="無効" ${caseData.status === '無効' ? 'selected' : ''}>無効</option>
                            <option value="クレーム" ${caseData.status === 'クレーム' ? 'selected' : ''}>クレーム</option>
                        </select>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${caseData.name}</div>
                        <div class="relative group">
                            <div class="text-xs text-gray-500 cursor-pointer hover:text-blue-600" 
                                 onclick="event.stopPropagation(); toggleAddressTooltip('${caseId}')">
                                📍 ${caseData.postalCode}
                            </div>
                            <!-- ホバー時(PC)またはタップ時(スマホ)の住所表示 -->
                            <div id="tooltip-${caseId}" class="absolute bottom-full left-0 mb-2 hidden group-hover:block z-50">
                                <div class="bg-gray-900 text-white text-xs rounded-lg py-2 px-3 whitespace-nowrap">
                                    ${caseData.address || '住所未設定'}
                                    <div class="absolute top-full left-4 -mt-1">
                                        <div class="border-4 border-transparent border-t-gray-900"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-4 text-center">
                        <div class="flex justify-center items-center space-x-2">
                            <button onclick="event.stopPropagation(); window.location.href='tel:${caseData.phone}'" class="text-xl hover:scale-110 transition-transform" title="電話">
                                📞
                            </button>
                            <button onclick="event.stopPropagation(); window.location.href='sms:${caseData.phone}'" class="text-xl hover:scale-110 transition-transform" title="SMS">
                                💬
                            </button>
                            <button onclick="event.stopPropagation(); sendData('${caseId}')" class="text-xl hover:scale-110 transition-transform" title="送信">
                                📤
                            </button>
                            <button onclick="event.stopPropagation(); quickActionList('不在', '${caseId}')" class="px-2 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600">
                                不在
                            </button>
                            <button onclick="event.stopPropagation(); openCallHistoryModal('${caseId}')" class="text-xl hover:scale-110 transition-transform" title="メモ">
                                📝
                            </button>
                        </div>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                        <div class="relative group">
                            <div class="cursor-pointer" onclick="event.stopPropagation(); toggleWorkDetails('${caseId}')">
                                ${getPropertyIcon(caseData.propertyType)} ${getFloorDisplay(caseData.propertyType, caseData.floors)}
                            </div>
                            <!-- 施工内容の詳細表示 -->
                            <div id="work-details-${caseId}" class="absolute bottom-full left-0 mb-2 hidden group-hover:block z-50">
                                <div class="bg-gray-900 text-white text-xs rounded-lg py-2 px-3 max-w-xs">
                                    <div class="font-semibold mb-1">施工内容:</div>
                                    ${caseData.workItems ? caseData.workItems.map(item => `<div>• ${item}</div>`).join('') : '未設定'}
                                    <div class="absolute top-full left-4 -mt-1">
                                        <div class="border-4 border-transparent border-t-gray-900"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-emerald-600">
                        ¥${Math.round(fee / 1000)}K
                    </td>
                    <td class="px-3 py-4 whitespace-nowrap text-center">
                        <button onclick="event.stopPropagation(); openCRM('${caseId}')" class="text-blue-600 hover:text-blue-800">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                            </svg>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // モバイル用カード表示も生成
            const mobileContainer = document.getElementById('casesListMobile');
            if (mobileContainer) {
                mobileContainer.innerHTML = '';

                pageCases.forEach(([caseId, caseData]) => {
                    const statusColor = getStatusColor(caseData.status);
                    const fee = calculateIntroductionFee(
                        caseData.workItems,
                        caseData.propertyType,
                        caseData.floors,
                        caseData.companiesCount
                    );

                    const card = document.createElement('div');
                    card.className = 'bg-white rounded-lg border border-gray-200 p-4 hover:shadow-lg transition-shadow';
                    card.innerHTML = `
                        <div class="flex justify-between items-start mb-3">
                            <div class="flex-1">
                                <div class="flex items-center gap-2 mb-2">
                                    <select class="text-xs border rounded px-2 py-1 ${statusColor}" onchange="changeStatus('${caseId}', this.value)">
                                        <option value="新規" ${caseData.status === '新規' ? 'selected' : ''}>新規</option>
                                        <option value="不在" ${caseData.status === '不在' ? 'selected' : ''}>不在</option>
                                        <option value="再架電" ${caseData.status === '再架電' ? 'selected' : ''}>再架電</option>
                                        <option value="見込み" ${caseData.status === '見込み' ? 'selected' : ''}>見込み</option>
                                        <option value="ロスト" ${caseData.status === 'ロスト' ? 'selected' : ''}>ロスト</option>
                                        <option value="配信中" ${caseData.status === '配信中' ? 'selected' : ''}>配信中</option>
                                        <option value="配信済" ${caseData.status === '配信済' ? 'selected' : ''}>配信済</option>
                                        <option value="他社契約済" ${caseData.status === '他社契約済' ? 'selected' : ''}>他社契約済</option>
                                        <option value="無効" ${caseData.status === '無効' ? 'selected' : ''}>無効</option>
                                        <option value="クレーム" ${caseData.status === 'クレーム' ? 'selected' : ''}>クレーム</option>
                                    </select>
                                    <span class="text-xs text-gray-500">#${caseId}</span>
                                </div>
                                <div class="font-semibold text-gray-900">${caseData.name}</div>
                                <div class="text-sm text-gray-600 mt-1">📍 ${caseData.postalCode}</div>
                                <div class="text-xs text-gray-500 mt-1">${caseData.address || '住所未設定'}</div>
                            </div>
                            <div class="text-right">
                                <div class="text-sm font-semibold text-emerald-600">¥${Math.round(fee / 1000)}K</div>
                                <div class="text-xs text-gray-500 mt-1">
                                    ${getPropertyIcon(caseData.propertyType)} ${getFloorDisplay(caseData.propertyType, caseData.floors)}
                                </div>
                            </div>
                        </div>
                        <div class="pt-3 border-t border-gray-200">
                            <div class="flex justify-between items-center">
                                <div class="flex space-x-2">
                                    <button onclick="window.location.href='tel:${caseData.phone}'" class="text-lg" title="電話">📞</button>
                                    <button onclick="window.location.href='sms:${caseData.phone}'" class="text-lg" title="SMS">💬</button>
                                    <button onclick="sendData('${caseId}')" class="text-lg" title="送信">📤</button>
                                    <button onclick="openCallHistoryModal('${caseId}')" class="text-lg" title="メモ">📝</button>
                                </div>
                                <div class="flex space-x-2">
                                    <button onclick="quickActionList('不在', '${caseId}')" class="px-2 py-1 text-xs bg-gray-500 text-white rounded">不在</button>
                                    <button onclick="openCRM('${caseId}')" class="px-3 py-1 text-xs bg-blue-600 text-white rounded">詳細</button>
                                </div>
                            </div>
                        </div>
                    `;
                    mobileContainer.appendChild(card);
                });
            }

            updateStatistics();
            updateSelectedCount();
        }
        
        // ページネーション情報の更新
        function updatePaginationInfo(total, from, to) {
            document.getElementById('totalCount').textContent = total;
            document.getElementById('showingFrom').textContent = from + 1;
            document.getElementById('showingTo').textContent = to;
            document.getElementById('currentPageCount').textContent = to - from;
            
            // ページ番号の生成
            const totalPages = Math.ceil(total / itemsPerPage);
            const pageNumbers = document.getElementById('pageNumbers');
            pageNumbers.innerHTML = '';
            
            // 最大5ページを表示
            const maxPages = 5;
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + maxPages - 1);
            
            if (endPage - startPage < maxPages - 1) {
                startPage = Math.max(1, endPage - maxPages + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const btn = document.createElement('button');
                btn.textContent = i;
                btn.className = i === currentPage 
                    ? 'px-3 py-1 text-sm bg-blue-500 text-white rounded'
                    : 'px-3 py-1 text-sm bg-white border rounded hover:bg-gray-50';
                btn.onclick = () => goToPage(i);
                pageNumbers.appendChild(btn);
            }
            
            // 前/次ボタンの状態更新
            document.getElementById('prevBtn').disabled = currentPage === 1;
            document.getElementById('nextBtn').disabled = currentPage === totalPages;
        }
        
        // ページ移動
        function goToPage(page) {
            currentPage = page;
            initializeListView();
        }
        
        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                initializeListView();
            }
        }
        
        function nextPage() {
            const totalPages = Math.ceil(Object.keys(casesData).length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                initializeListView();
            }
        }
        
        // 表示件数の変更
        function changeItemsPerPage() {
            itemsPerPage = parseInt(document.getElementById('itemsPerPage').value);
            currentPage = 1;
            initializeListView();
        }
        
        // 選択件数の更新
        function updateSelectedCount() {
            const checkboxes = document.querySelectorAll('#casesListBody input[type="checkbox"]:checked');
            const selectedCount = checkboxes.length;
            document.getElementById('selectedCount').textContent = selectedCount;
            
            // 選択件数表示の表示/非表示を制御
            const selectionDisplay = document.getElementById('selectionCountDisplay');
            if (selectedCount > 0 && currentView === 'list') {
                selectionDisplay.classList.remove('hidden');
            } else {
                selectionDisplay.classList.add('hidden');
            }
        }
        
        // 全選択/全解除
        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.case-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
            updateSelectedCount();
        }
        
        // ステータス変更
        function changeStatus(caseId, newStatus) {
            casesData[caseId].status = newStatus;
            // 必要に応じてサーバーに保存
            console.log(`案件 ${caseId} のステータスを ${newStatus} に変更`);
        }
        
        // CRMステータス変更
        function changeCRMStatus(newStatus) {
            if (!currentCaseId) return;
            casesData[currentCaseId].status = newStatus;
            console.log(`案件 ${currentCaseId} のステータスを ${newStatus} に変更`);
        }
        
        // 架電履歴モーダルを開く（リストからもCRMからも使える）
        function openCallHistoryModal(caseId) {
            // リストから開いた場合はcaseIdを設定
            if (caseId) {
                currentCaseId = caseId;
            }
            document.getElementById('callHistoryModal').classList.remove('hidden');
            loadCallHistory();
        }
        
        // 架電履歴モーダルを閉じる
        function closeCallHistoryModal() {
            document.getElementById('callHistoryModal').classList.add('hidden');
            document.getElementById('newCallNote').value = '';
            document.getElementById('nextCallDate').value = '';
        }
        
        // 架電履歴を追加
        function addCallHistory() {
            const note = document.getElementById('newCallNote').value;
            if (!note.trim()) return;
            
            if (!casesData[currentCaseId].callHistory) {
                casesData[currentCaseId].callHistory = [];
            }
            
            const timestamp = new Date().toLocaleString('ja-JP');
            const nextCallDate = document.getElementById('nextCallDate').value;
            
            casesData[currentCaseId].callHistory.unshift({
                timestamp: timestamp,
                note: note,
                nextCallDate: nextCallDate
            });
            
            // 次回架電日を保存
            if (nextCallDate) {
                casesData[currentCaseId].nextCallDate = nextCallDate;
            }
            
            // UIリセット
            document.getElementById('newCallNote').value = '';
            document.getElementById('nextCallDate').value = '';
            
            // 履歴を再表示
            loadCallHistory();
            
            // リスト表示も更新（メモの同期）
            if (currentView === 'list') {
                initializeListView();
            }
        }
        
        // 住所を表示（ツールチップまたはアラート）
        // 住所ツールチップのトグル（スマホ用）
        function toggleAddressTooltip(caseId) {
            const tooltip = document.getElementById(`tooltip-${caseId}`);
            if (tooltip) {
                tooltip.classList.toggle('hidden');
                // 3秒後に自動で閉じる
                if (!tooltip.classList.contains('hidden')) {
                    setTimeout(() => {
                        tooltip.classList.add('hidden');
                    }, 3000);
                }
            }
        }
        
        // 施工内容詳細のトグル（スマホ用）
        function toggleWorkDetails(caseId) {
            const details = document.getElementById(`work-details-${caseId}`);
            if (details) {
                details.classList.toggle('hidden');
                // 3秒後に自動で閉じる
                if (!details.classList.contains('hidden')) {
                    setTimeout(() => {
                        details.classList.add('hidden');
                    }, 3000);
                }
            }
        }
        
        // メモ履歴のプレビューを取得
        function getMemoPreview(caseId) {
            const caseData = casesData[caseId];
            if (!caseData || !caseData.callHistory || caseData.callHistory.length === 0) {
                return '<div class="text-gray-400">メモはまだありません</div>';
            }
            
            // 最新3件のメモを表示
            const recentMemos = caseData.callHistory.slice(-3).reverse();
            return recentMemos.map(memo => 
                `<div class="mb-1 pb-1 border-b border-gray-700 last:border-0">
                    <div class="text-gray-400">${memo.date}</div>
                    <div>${memo.note.substring(0, 50)}${memo.note.length > 50 ? '...' : ''}</div>
                </div>`
            ).join('');
        }
        
        // 架電履歴を読み込み
        function loadCallHistory() {
            const historyList = document.getElementById('callHistoryList');
            const history = casesData[currentCaseId]?.callHistory || [];
            
            if (history.length === 0) {
                historyList.innerHTML = '<p class="text-gray-500 text-center">履歴がありません</p>';
                return;
            }
            
            historyList.innerHTML = history.map(item => `
                <div class="border-l-4 border-blue-500 pl-4 py-2">
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <p class="text-sm text-gray-600">${item.timestamp}</p>
                            <p class="mt-1">${item.note}</p>
                            ${item.nextCallDate ? `<p class="text-sm text-blue-600 mt-1">次回架電: ${item.nextCallDate}</p>` : ''}
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // データを保存
        function saveAllData() {
            // ローカルストレージに保存（実際はサーバーに送信）
            try {
                localStorage.setItem('casesData', JSON.stringify(casesData));
                
                // 保存成功のフィードバック
                const button = event.currentTarget;
                const originalText = button.innerHTML;
                button.innerHTML = `
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    保存済み
                `;
                button.classList.remove('bg-pink-400', 'hover:bg-pink-500');
                button.classList.add('bg-gray-600');

                // 2秒後に元に戻す
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.classList.remove('bg-gray-600');
                    button.classList.add('bg-pink-400', 'hover:bg-pink-500');
                }, 2000);
                
                console.log('データを保存しました');
            } catch (error) {
                console.error('保存エラー:', error);
                alert('保存に失敗しました');
            }
        }
        
        // 物件タイプのアイコンを取得
        function getPropertyIcon(propertyType) {
            const icons = {
                '戸建て': '🏠',
                'アパート': '🏢',
                'マンション': '🏢',
                '店舗': '🏪',
                '事務所': '🏪',
                '工場': '🏭',
                '倉庫': '🏭'
            };
            return icons[propertyType] || '🏠';
        }
        
        // 階数表示を取得
        function getFloorDisplay(propertyType, floors) {
            if (!floors) return '';
            
            // アパート・マンションの場合
            if (propertyType === 'アパート' || propertyType === 'マンション') {
                if (floors === '10階建て以上') return '10F〜';
                const match = floors.match(/(\d+)/);
                if (match) return `${match[1]}F`;
                return floors;
            }
            
            // その他の物件タイプ
            const match = floors.match(/(\d+)/);
            if (match) {
                const num = parseInt(match[1]);
                if (num >= 4) return '4F〜';
                return `${num}F`;
            }
            return floors;
        }

        // ビュー切り替え
        let currentView = 'list';
        let currentCaseId = '001';
        
        function switchView(view) {
            console.log('switchView called with view:', view);
            if (view === 'list') {
                document.getElementById('listView').classList.remove('hidden');
                document.getElementById('crmView').classList.add('hidden');
                document.getElementById('listViewBtn').classList.add('bg-white', 'text-gray-900');
                document.getElementById('listViewBtn').classList.remove('text-gray-600');
                document.getElementById('crmViewBtn').classList.remove('bg-white', 'text-gray-900');
                document.getElementById('crmViewBtn').classList.add('text-gray-600');
                currentView = 'list';
                initializeListView();
                // リスト表示時は選択件数の表示を更新
                updateSelectedCount();
            } else {
                document.getElementById('listView').classList.add('hidden');
                document.getElementById('crmView').classList.remove('hidden');
                document.getElementById('crmViewBtn').classList.add('bg-white', 'text-gray-900');
                document.getElementById('crmViewBtn').classList.remove('text-gray-600');
                document.getElementById('listViewBtn').classList.remove('bg-white', 'text-gray-900');
                document.getElementById('listViewBtn').classList.add('text-gray-600');
                currentView = 'crm';
                // CRM表示時は選択件数を非表示
                document.getElementById('selectionCountDisplay').classList.add('hidden');
                loadCRMContent(currentCaseId);
            }
        }

        // CRM詳細を開く
        function openCRM(caseId) {
            console.log('openCRM called with caseId:', caseId);
            currentCaseId = caseId;
            switchView('crm');
        }

        // 新規案件を作成
        function createNewCase() {
            // 新しい案件IDを生成（タイムスタンプベース）
            const newCaseId = 'CASE-' + Date.now();

            // 空の案件データを作成
            casesData[newCaseId] = {
                status: '新規',
                name: '',
                phone: '',
                area: '',
                propertyType: '戸建て',
                floors: '2階建て',
                workItems: [],
                amount: '¥0',
                age: '',
                gender: '',
                relationship: '本人',
                address: '',
                email: '',
                memo: [],
                callHistory: [],
                createdAt: new Date().toISOString(),
                isNew: true  // 新規作成フラグ
            };

            // 新規案件をCRMで開く
            currentCaseId = newCaseId;
            switchView('crm');

            // フォームをクリア
            clearCRMForm();

            // ステータスを新規に設定
            document.getElementById('crmStatus').value = '新規';

            // 通知を表示
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            notification.textContent = '新規案件を作成しました';
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // CRMフォームをクリア
        function clearCRMForm() {
            const crmContent = document.getElementById('crmContent');
            if (!crmContent) return;

            // すべての入力フィールドをクリア
            const inputs = crmContent.querySelectorAll('input[type="text"], input[type="tel"], input[type="email"], textarea');
            inputs.forEach(input => {
                input.value = '';
            });

            // すべてのセレクトボックスを初期値に戻す
            const selects = crmContent.querySelectorAll('select');
            selects.forEach(select => {
                select.selectedIndex = 0;
            });

            // チェックボックスをすべて外す
            const checkboxes = crmContent.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });

            // ラジオボタンをクリア
            const radios = crmContent.querySelectorAll('input[type="radio"]');
            radios.forEach(radio => {
                radio.checked = false;
            });
        }

        // CRMコンテンツの読み込み
        function loadCRMContent(caseId) {
            const caseData = casesData[caseId];
            if (!caseData) return;

            // ステータスを設定
            document.getElementById('crmStatus').value = caseData.status;

            // CRMビューのメモプレビューを更新
            const crmMemoPreview = document.getElementById('crmMemoPreview');
            if (crmMemoPreview) {
                crmMemoPreview.innerHTML = getMemoPreview(caseId).replace('text-gray-400', 'text-gray-300');
            }

            // 元のフォームコンテンツを取得してCRMエリアに挿入
            const originalContentElement = document.getElementById('originalFormContent');
            if (originalContentElement) {
                // すべてのフォームセクションを取得してCRMエリアに挿入
                document.getElementById('crmContent').innerHTML = originalContentElement.innerHTML;
            }

            // 新規作成の場合はフォームをクリア、それ以外は既存データを反映
            if (caseData.isNew) {
                clearCRMForm();
                // 新規作成フラグを削除
                delete caseData.isNew;
            } else {
                // フォームに案件データを反映（エラーハンドリング付き）
                try {
                    populateForm(caseId);
                } catch (e) {
                    console.log('フォームデータの反映でエラー:', e);
                }
            }
        }

        // クイックアクション（リスト用）
        function quickActionList(action, caseId) {
            if (action === '不在') casesData[caseId].status = '不在';
            else if (action === '対応中') casesData[caseId].status = '配信中';
            else if (action === '完了') casesData[caseId].status = '完了';

            initializeListView();
        }

        // データ送信機能
        function sendData(caseId) {
            const caseData = casesData[caseId];
            if (!caseData) return;

            // 送信処理（実際のアプリケーションではAPIコールを行う）
            console.log(`案件 ${caseId} のデータを送信しました`);

            // 通知を表示
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            notification.textContent = `📤 データを送信しました`;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);

            // ステータスを更新（必要に応じて）
            casesData[caseId].status = '配信済';
            initializeListView();
        }

        // クイックアクション（CRM用）
        function quickActionCRM(status) {
            if (!currentCaseId) return;
            
            casesData[currentCaseId].status = status;
            
            // 不在・再架電の場合は次の案件へ
            if (status === '不在' || status === '再架電') {
                nextCase();
            } else {
                loadCRMContent(currentCaseId);
            }
        }

        // すべて表示
        function showAllCases() {
            currentStatusFilter = '';
            closeModal();
            initializeListView();
        }

        // 次の案件へ
        function nextCase() {
            const caseIds = Object.keys(casesData);
            const currentIndex = caseIds.indexOf(currentCaseId);
            if (currentIndex < caseIds.length - 1) {
                currentCaseId = caseIds[currentIndex + 1];
                loadCRMContent(currentCaseId);
            }
        }

        // 前の案件へ
        function previousCase() {
            const caseIds = Object.keys(casesData);
            const currentIndex = caseIds.indexOf(currentCaseId);
            if (currentIndex > 0) {
                currentCaseId = caseIds[currentIndex - 1];
                loadCRMContent(currentCaseId);
            } else if (currentIndex === 0) {
                // 1件目の場合はリストビューに戻る
                switchView('list');
            }
        }
        
        // 連絡時間帯のスタンプ追加機能
        function addTimeStamp(text) {
            const input = document.getElementById('contactTimeInput');
            if (input) {
                const currentValue = input.value;
                // 既存の内容がある場合はスペースを追加
                if (currentValue && !currentValue.endsWith(' ')) {
                    input.value = currentValue + ' ' + text;
                } else {
                    input.value = currentValue + text;
                }
                
                // フォーカスを維持
                input.focus();
            }
        }
        
        // 見積もり送付先住所の表示切り替え
        function toggleEstimateAddress() {
            const checkbox = document.getElementById('estimateAddressCheck');
            const addressArea = document.getElementById('estimateAddressArea');
            
            if (checkbox && addressArea) {
                if (checkbox.checked) {
                    addressArea.classList.remove('hidden');
                } else {
                    addressArea.classList.add('hidden');
                    // チェックを外したときは入力内容もクリア
                    document.getElementById('estimatePostalCode').value = '';
                    document.getElementById('estimateAddress').value = '';
                }
            }
        }
        
        // 業者カードのチェック切り替え
        function toggleFranchise(element) {
            const checkbox = element.querySelector('input[type="checkbox"]');
            if (checkbox) {
                checkbox.checked = !checkbox.checked;
                if (checkbox.checked) {
                    element.classList.add('selected');
                } else {
                    element.classList.remove('selected');
                }
            }
        }
        
        // 業者のソート機能
        function sortFranchises(sortType) {
            // ソートボタンのスタイル更新
            document.querySelectorAll('.franchise-sort-btn').forEach(btn => {
                btn.classList.remove('bg-blue-600', 'text-white');
                btn.classList.add('bg-gray-200', 'text-gray-700');
            });
            
            const activeBtn = document.querySelector(`[data-sort="${sortType}"]`);
            if (activeBtn) {
                activeBtn.classList.remove('bg-gray-200', 'text-gray-700');
                activeBtn.classList.add('bg-blue-600', 'text-white');
            }
            
            // ここで実際のソート処理を実装
            console.log('Sorting by:', sortType);
            // TODO: 実際のソート処理
        }
        
        // 業者検索機能
        function searchFranchise(searchText) {
            const container = document.getElementById('franchiseListContainer');
            if (!container) return;
            
            const franchiseItems = container.querySelectorAll('.franchise-item');
            
            franchiseItems.forEach(item => {
                const name = item.querySelector('.font-semibold').textContent;
                const id = item.dataset.franchiseId;
                
                if (searchText === '' || 
                    name.toLowerCase().includes(searchText.toLowerCase()) || 
                    id.toLowerCase().includes(searchText.toLowerCase())) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }
        
        // 郵便番号から住所を取得
        async function fetchAddressFromPostal() {
            const postalCode = document.getElementById('estimatePostalCode').value;
            const addressInput = document.getElementById('estimateAddress');
            
            if (!postalCode) {
                alert('郵便番号を入力してください');
                return;
            }
            
            // 郵便番号のフォーマットを整える（ハイフンを除去）
            const cleanPostalCode = postalCode.replace(/[^0-9]/g, '');
            
            if (cleanPostalCode.length !== 7) {
                alert('正しい郵便番号を入力してください（7桁）');
                return;
            }
            
            try {
                // 郵便番号APIを使用（無料のzipcloud API）
                const response = await fetch(`https://zipcloud.ibsnet.co.jp/api/search?zipcode=${cleanPostalCode}`);
                const data = await response.json();
                
                if (data.results && data.results.length > 0) {
                    const result = data.results[0];
                    const address = result.address1 + result.address2 + result.address3;
                    addressInput.value = address;
                } else {
                    alert('住所が見つかりませんでした');
                }
            } catch (error) {
                console.error('住所取得エラー:', error);
                alert('住所の取得に失敗しました');
            }
        }

        // 統計情報の更新
        function updateStatistics() {
            const total = Object.keys(casesData).length;
            const completed = Object.values(casesData).filter(c => c.status === '完了').length;
            // null チェックを追加
            const totalTodayElement = document.getElementById('totalToday');
            const completedTodayElement = document.getElementById('completedToday');

            if (totalTodayElement) {
                totalTodayElement.textContent = total;
            }
            if (completedTodayElement) {
                completedTodayElement.textContent = completed;
            }
        }
        
        // 財務タブ切り替え
        function switchFinancialTab(tabName) {
            // すべてのタブコンテンツを非表示
            document.querySelectorAll('.financial-tab-content').forEach(tab => {
                tab.style.display = 'none';
            });
            
            // すべてのタブボタンのスタイルをリセット
            document.querySelectorAll('#financialTabs .tab-btn').forEach(btn => {
                btn.classList.remove('text-blue-600', 'border-b-2', 'border-blue-600');
                btn.classList.add('text-gray-600', 'hover:text-gray-800');
            });
            
            // 選択されたタブを表示
            const selectedTab = document.getElementById(tabName + 'Tab');
            if (selectedTab) {
                selectedTab.style.display = 'block';
            }
            
            // 選択されたタブボタンをアクティブに
            const activeBtn = document.querySelector(`button[data-tab="${tabName}"]`);
            if (activeBtn) {
                activeBtn.classList.remove('text-gray-600', 'hover:text-gray-800');
                activeBtn.classList.add('text-blue-600', 'border-b-2', 'border-blue-600');
            }
        }
        
        // スワイプ機能の実装
        function initializeSwipeGesture() {
            const crmView = document.getElementById('crmView');
            if (!crmView) {
                console.log('CRM View not found for swipe');
                return;
            }
            
            let touchStartX = 0;
            let touchEndX = 0;
            let touchStartY = 0;
            let touchEndY = 0;
            
            // タッチ開始
            crmView.addEventListener('touchstart', function(e) {
                touchStartX = e.changedTouches[0].screenX;
                touchStartY = e.changedTouches[0].screenY;
                console.log('Touch start:', touchStartX);
            }, { passive: true });
            
            // タッチ終了
            crmView.addEventListener('touchend', function(e) {
                touchEndX = e.changedTouches[0].screenX;
                touchEndY = e.changedTouches[0].screenY;
                console.log('Touch end:', touchEndX);
                handleSwipe();
            }, { passive: true });
            
            // マウスでもスワイプを可能にする（PC開発用）
            let mouseDown = false;
            let mouseStartX = 0;
            let mouseEndX = 0;
            
            crmView.addEventListener('mousedown', function(e) {
                mouseDown = true;
                mouseStartX = e.screenX;
                console.log('Mouse down:', mouseStartX);
            });
            
            crmView.addEventListener('mouseup', function(e) {
                if (mouseDown) {
                    mouseEndX = e.screenX;
                    console.log('Mouse up:', mouseEndX);
                    const diff = mouseEndX - mouseStartX;
                    handleMouseSwipe(diff);
                    mouseDown = false;
                }
            });
            
            // マウスでのスワイプ処理
            function handleMouseSwipe(diff) {
                const swipeThreshold = 100; // マウスは少し大きめの閾値
                
                if (Math.abs(diff) > swipeThreshold) {
                    if (diff > 0) {
                        // 右スワイプ（前の案件へ）
                        console.log('Right swipe detected (mouse)');
                        previousCase();
                    } else {
                        // 左スワイプ（次の案件へ）
                        console.log('Left swipe detected (mouse)');
                        nextCase();
                    }
                }
            }
            
            // タッチでのスワイプ処理
            function handleSwipe() {
                const swipeThreshold = 50; // 最小スワイプ距離
                const diffX = touchEndX - touchStartX;
                const diffY = Math.abs(touchEndY - touchStartY);
                
                // 縦スワイプより横スワイプが大きい場合のみ
                if (Math.abs(diffX) > swipeThreshold && Math.abs(diffX) > diffY) {
                    if (diffX > 0) {
                        // 右スワイプ（前の案件へ）
                        console.log('Right swipe detected (touch)');
                        previousCase();
                    } else {
                        // 左スワイプ（次の案件へ）
                        console.log('Left swipe detected (touch)');
                        nextCase();
                    }
                }
            }
            
            console.log('Swipe gesture initialized');
        }

        // 初期化処理
        document.addEventListener('DOMContentLoaded', function() {
            console.log('=== DOMContentLoaded - 初期化開始 ===');
            console.log('casesData:', casesData);
            console.log('Total cases:', Object.keys(casesData).length);

            // 初期の案件管理コンテンツを保存（現在表示されているのが案件管理）
            window.originalAssignmentContent = document.querySelector('main').innerHTML;

            // ハッシュ処理
            const hash = window.location.hash.slice(1);

            // URLにハッシュがない場合、またはfranchiseの場合は加盟店管理を表示
            if (!hash || hash === 'franchise') {
                setTimeout(() => {
                    showSection('franchise');
                }, 100);
            } else if (hash === 'assignment') {
                // 案件管理の場合は何もしない（既に表示されている）
                console.log('案件管理を表示中');
            } else {
                // その他のセクションを表示
                setTimeout(() => {
                    showSection(hash);
                }, 100);
            }
            
            // 関数の初期化
            try {
                // リストビューを初期化
                if (typeof initializeListView === 'function') {
                    initializeListView();
                    console.log('✓ initializeListView 実行完了');
                } else {
                    console.error('✗ initializeListView is not defined');
                }
                
                // 検索とフィルターを初期化
                if (typeof initializeSearchAndFilter === 'function') {
                    initializeSearchAndFilter();
                    console.log('✓ initializeSearchAndFilter 実行完了');
                } else {
                    console.error('✗ initializeSearchAndFilter is not defined');
                }
                
                // 統計カウントを更新
                if (typeof updateStatsCounts === 'function') {
                    updateStatsCounts();
                    console.log('✓ updateStatsCounts 実行完了');
                } else {
                    console.error('✗ updateStatsCounts is not defined');
                }
                
                // 統計を更新
                if (typeof updateStatistics === 'function') {
                    updateStatistics();
                    console.log('✓ updateStatistics 実行完了');
                } else {
                    console.error('✗ updateStatistics is not defined');
                }
                
                // タイムスロットとチェックボックスの初期化
                if (typeof initializeTimeSlots === 'function') {
                    initializeTimeSlots();
                }
                if (typeof initializeCheckboxes === 'function') {
                    initializeCheckboxes();
                }
                
                // スワイプ機能の初期化
                if (typeof initializeSwipeGesture === 'function') {
                    initializeSwipeGesture();
                    console.log('✓ initializeSwipeGesture 実行完了');
                }
                
                console.log('=== 初期化完了 ===');
            } catch(e) {
                console.error('初期化エラー:', e);
            }
        });

        // 加盟店登録申請の検索機能
        function searchRegistrations() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            // 承認待ちと承認済みの両方のテーブルを検索
            const pendingRows = document.querySelectorAll('#pending-table tbody tr');
            const approvedRows = document.querySelectorAll('#approved-table tbody tr');
            const mobileCards = document.querySelectorAll('#pending-mobile > div, #approved-mobile > div');

            // 承認待ちテーブルのフィルタリング
            pendingRows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });

            // 承認済みテーブルのフィルタリング
            approvedRows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });

            // モバイルカードのフィルタリング
            mobileCards.forEach(card => {
                const text = card.textContent.toLowerCase();
                card.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        // 通知表示関数
        function showNotification(message, type = 'info') {
            // 既存の通知を削除
            const existingNotification = document.querySelector('.notification-toast');
            if (existingNotification) {
                existingNotification.remove();
            }

            // 通知要素を作成
            const notification = document.createElement('div');
            notification.className = 'notification-toast fixed top-20 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all transform translate-x-full';

            // タイプによって色を変更
            if (type === 'success') {
                notification.classList.add('bg-green-600', 'text-white');
            } else if (type === 'error') {
                notification.classList.add('bg-red-600', 'text-white');
            } else {
                notification.classList.add('bg-blue-600', 'text-white');
            }

            notification.textContent = message;
            document.body.appendChild(notification);

            // アニメーションで表示
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
                notification.classList.add('translate-x-0');
            }, 100);

            // 3秒後に削除
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);
        }

        // 加盟店管理の検索機能
        function searchFranchises() {
            const searchTerm = document.getElementById('franchiseSearchInput')?.value.toLowerCase() || '';
            const statusFilter = document.getElementById('franchiseStatusFilter')?.value || 'all';

            console.log('検索実行:', { searchTerm, statusFilter });

            // PC版テーブル行のフィルタリング
            const tableRows = document.querySelectorAll('#franchise-table tbody tr');
            tableRows.forEach(row => {
                // 会社名とエリアを取得（1列目に会社名、2列目にエリア）
                const companyCell = row.querySelector('td:nth-child(1)');
                const areaCell = row.querySelector('td:nth-child(2)');
                const statusSelect = row.querySelector('td:nth-child(6) select');

                const companyName = companyCell?.textContent.toLowerCase() || '';
                const area = areaCell?.textContent.toLowerCase() || '';
                const currentStatus = statusSelect?.value || '';

                // 検索条件のチェック
                const matchesSearch = searchTerm === '' || companyName.includes(searchTerm) || area.includes(searchTerm);

                // ステータス条件のチェック
                const matchesStatus = statusFilter === 'all' || currentStatus === statusFilter;

                // 両方の条件を満たす場合のみ表示
                row.style.display = (matchesSearch && matchesStatus) ? '' : 'none';
            });

            // モバイル版カードのフィルタリング（正しいセレクターを使用）
            const mobileCards = document.querySelectorAll('#franchise-mobile-container > div');
            console.log('モバイルカード数:', mobileCards.length);

            let visibleCount = 0;
            mobileCards.forEach(card => {
                // カードがデータ読み込み中のメッセージの場合はスキップ
                if (card.textContent.includes('データを読み込み中')) {
                    return;
                }

                // 会社名を取得（最初の font-semibold 要素）
                const nameElement = card.querySelector('.font-semibold');
                const companyName = nameElement?.textContent.toLowerCase() || '';

                // エリアを取得
                const areaElement = Array.from(card.querySelectorAll('.flex.justify-between')).find(el =>
                    el.textContent.includes('エリア:')
                );
                const area = areaElement?.querySelector('span:last-child')?.textContent.toLowerCase() || '';

                // ステータスセレクトボックスを取得
                const statusSelect = card.querySelector('select.status-select');
                const currentStatus = statusSelect?.value || '';

                // 検索条件のチェック
                const matchesSearch = searchTerm === '' || companyName.includes(searchTerm) || area.includes(searchTerm);

                // ステータス条件のチェック
                const matchesStatus = statusFilter === 'all' || currentStatus === statusFilter;

                // 両方の条件を満たす場合のみ表示
                const shouldShow = matchesSearch && matchesStatus;
                card.style.display = shouldShow ? '' : 'none';

                if (shouldShow) visibleCount++;

                console.log('カード:', {
                    companyName,
                    area,
                    currentStatus,
                    matchesSearch,
                    matchesStatus,
                    shouldShow
                });
            });

            console.log('表示中のカード数:', visibleCount);
        }

        // ステータスでフィルタリング
        function filterFranchisesByStatus() {
            // searchFranchises関数で統合処理するので、そちらを呼び出す
            searchFranchises();
        }
    </script>
    </div> <!-- mainApp終了 -->

    <!-- ログイン処理スクリプト -->
    <script>
        // ログイン処理
        function handleLogin(event) {
            event.preventDefault();
            
            const userId = document.getElementById('userId').value;
            const password = document.getElementById('password').value;
            const rememberMe = document.getElementById('rememberMe').checked;
            const loginError = document.getElementById('loginError');
            
            // デモ用の認証（実際はサーバー側で認証）
            // ユーザー: admin / パスワード: admin123
            // ユーザー: admin@example.com / パスワード: admin123 も許可
            if ((userId === 'admin' || userId === 'admin@example.com') && password === 'admin123') {
                // ログイン成功
                loginError.classList.add('hidden');
                
                // セッションまたはローカルストレージに保存
                const storage = rememberMe ? localStorage : sessionStorage;
                storage.setItem('isLoggedIn', 'true');
                storage.setItem('userId', userId);
                storage.setItem('loginTime', new Date().toISOString());
                
                // ログイン画面を非表示、メインアプリを表示
                document.getElementById('loginScreen').style.display = 'none';
                document.getElementById('mainApp').classList.remove('hidden');
                
                // 初期化処理を実行
                if (typeof initializeListView === 'function') {
                    initializeListView();
                }
            } else {
                // ログイン失敗
                loginError.textContent = 'ユーザーIDまたはパスワードが正しくありません';
                loginError.classList.remove('hidden');
                
                // パスワードフィールドをクリア
                document.getElementById('password').value = '';
            }
        }
        
        // ログアウト処理
        function logout() {
            localStorage.removeItem('isLoggedIn');
            localStorage.removeItem('userId');
            localStorage.removeItem('loginTime');
            sessionStorage.clear();
            location.reload();
        }
        
        // ページ読み込み時の認証チェック
        window.addEventListener('DOMContentLoaded', function() {
            const isLoggedIn = localStorage.getItem('isLoggedIn') || sessionStorage.getItem('isLoggedIn');
            
            if (isLoggedIn === 'true') {
                // 既にログイン済み
                document.getElementById('loginScreen').style.display = 'none';
                document.getElementById('mainApp').classList.remove('hidden');
                
                // 初期化処理を実行
                if (typeof initializeListView === 'function') {
                    initializeListView();
                }
            }
        });
        
        // 管理者メニューにログアウトボタンを追加
        document.addEventListener('DOMContentLoaded', function() {
            const adminSection = document.querySelector('.text-gray-700');
            if (adminSection && adminSection.textContent === '管理者') {
                const logoutBtn = document.createElement('button');
                logoutBtn.textContent = 'ログアウト';
                logoutBtn.className = 'ml-4 text-sm text-red-600 hover:text-red-800';
                logoutBtn.onclick = logout;
                adminSection.parentElement.appendChild(logoutBtn);
            }
        });
    </script>
    <!-- 管理ダッシュボード API連携 -->
    <!-- 新アーキテクチャ v2.0 -->
    <script>
      // 強制URL更新
      const ENV = {
        GAS_URL: 'https://script.google.com/macros/s/AKfycbw_XuhptcOn_3MjQUzkrsMZUSMBemL5Hn51u7enSfvAGYGkjnyxPtn61DdrFDNLhUCNXw/exec',
        DEBUG: false,
        TIMEOUT: 60000,
        MAX_RETRIES: 3,
        RETRY_DELAY: 1000
      };
      window.ENV = ENV;
    </script>
    <script src="js/api-client.js?v=2.3"></script>
    <!-- dashboard-api-v2.jsは registration-requests.js と重複するため無効化 -->
    <!-- <script src="js/dashboard-api-v2.js?v=2.3"></script> -->
    <script src="js/data-formatter.js?v=2.3"></script>
    <script src="js/registration-requests.js?v=1.1"></script>
    <script>
        // ページ読み込み完了後にデータを取得
        document.addEventListener('DOMContentLoaded', function() {
            // ログイン後のみデータ取得
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') || localStorage.getItem('isLoggedIn');

            if (isLoggedIn) {
                // ログインしていれば即座にデータ取得（バッジ更新のため）
                setTimeout(() => {
                    if (typeof refreshDashboard === 'function') {
                        refreshDashboard();
                    } else if (window.dashboardAPI && typeof window.dashboardAPI.refreshDashboard === 'function') {
                        window.dashboardAPI.refreshDashboard();
                    }
                }, 100); // 100msの遅延で確実に関数が利用可能になるまで待つ
            }

            // 期間選択セレクタのイベントリスナー
            const dateRangeSelector = document.getElementById('dateRangeSelector');
            if (dateRangeSelector) {
                dateRangeSelector.addEventListener('change', function() {
                    console.log('期間変更:', dateRangeSelector.value + '日');
                    if (typeof refreshDashboard === 'function') {
                        refreshDashboard();
                    }
                });
            }
        });

        // ハッシュ変更時に即座にデータ取得
        window.addEventListener('hashchange', function() {
            const isLoggedIn = sessionStorage.getItem('isLoggedIn') || localStorage.getItem('isLoggedIn');

            // ページ遷移したら即座にデータ更新
            if (isLoggedIn) {
                console.log('ページ遷移検知 - データ即時取得');
                if (typeof refreshDashboard === 'function') {
                    refreshDashboard();
                } else if (window.dashboardAPI && typeof window.dashboardAPI.refreshDashboard === 'function') {
                    window.dashboardAPI.refreshDashboard();
                }
            }
        });

    </script>
</body>
</html>